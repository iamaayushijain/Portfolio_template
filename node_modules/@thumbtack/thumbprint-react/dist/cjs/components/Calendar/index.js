'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactDayPicker = require('react-day-picker');
var some = _interopDefault(require('lodash/some'));
var isArray = _interopDefault(require('lodash/isArray'));
var map = _interopDefault(require('lodash/map'));
var get = _interopDefault(require('lodash/get'));
var findIndex = _interopDefault(require('lodash/findIndex'));
var castArray = _interopDefault(require('lodash/castArray'));
var dateFns = require('date-fns');
var styles = _interopDefault(require('./index.module.scss'));

function throwError(message) {
  throw new Error("TUI DatePicker: ".concat(message));
}

function normaliseValue(value) {
  if (!value) {
    return [];
  }

  if (!isArray(value)) {
    return [new Date(value)];
  }

  return map(value, function (d) {
    return new Date(d);
  });
} // Returns true any of the given `dates` fall on a day before the day of `cutoff`.

function hasAnyPastDays(dates) {
  var cutoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
  return some(dates, function (date) {
    return dateFns.isBefore(dateFns.endOfDay(date), cutoff);
  });
} // Returns true any of the given `dates` fall on a day after the day of `cutoff`.

function hasAnyFutureDays(dates) {
  var cutoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
  return some(dates, function (date) {
    return dateFns.isAfter(dateFns.startOfDay(date), cutoff);
  });
}
function validateProps(props) {
  var days = normaliseValue(props.value);

  if (!props.allowMultiSelection && days.length > 1) {
    throwError('`allowMultiSelection` is `false` but multiple dates were provided');
  }

  var disabledDays = castArray(props.disabledDays);
  /* eslint-disable lodash/prefer-lodash-method */

  disabledDays.forEach(function (modifier) {
    if (reactDayPicker.isDateBeforeType(modifier) && hasAnyPastDays(days, modifier.before)) {
      throwError("Days before ".concat(modifier.before, " are disabled but one or more provided days fall before that."));
    }
  });
  disabledDays.forEach(function (modifier) {
    if (reactDayPicker.isDateAfterType(modifier) && hasAnyFutureDays(days, modifier.after)) {
      throwError("Days after ".concat(modifier.after, " are disabled but one or more provided days fall after that."));
    }
  });
}
/**
 * Thin wrapper around `react-day-picker` that renders a calendar.
 */

function Calendar(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? [] : _ref$value,
      onChange = _ref.onChange,
      onMonthChange = _ref.onMonthChange,
      _ref$disabledDays = _ref.disabledDays,
      disabledDays = _ref$disabledDays === void 0 ? {
    before: new Date()
  } : _ref$disabledDays,
      month = _ref.month,
      lastMonth = _ref.lastMonth,
      _ref$allowMultiSelect = _ref.allowMultiSelection,
      allowMultiSelection = _ref$allowMultiSelect === void 0 ? false : _ref$allowMultiSelect,
      daysThemeDotIndicator = _ref.daysThemeDotIndicator,
      daysThemeStrikeout = _ref.daysThemeStrikeout;
  validateProps({
    value: value,
    onChange: onChange,
    disabledDays: disabledDays,
    month: month,
    lastMonth: lastMonth,
    allowMultiSelection: allowMultiSelection,
    onMonthChange: onMonthChange,
    daysThemeDotIndicator: daysThemeDotIndicator,
    daysThemeStrikeout: daysThemeStrikeout
  });
  var selectedDays = normaliseValue(value);
  var modifiers = {};
  var modifiersClassNames = {};

  if (typeof daysThemeDotIndicator === 'function') {
    modifiers['theme-dot'] = daysThemeDotIndicator;
    modifiersClassNames['theme-dot'] = 'rdp-day--theme-dot';
  }

  if (typeof daysThemeStrikeout === 'function') {
    modifiers['theme-strikeout'] = daysThemeStrikeout;
    modifiersClassNames['theme-strikeout'] = 'rdp-day--theme-strikeout';
  }

  return React__default.createElement("div", {
    className: styles.root
  }, React__default.createElement(reactDayPicker.DayPicker, {
    disabled: disabledDays || undefined,
    fromMonth: get(disabledDays, 'before', null),
    toMonth: lastMonth,
    month: month || (selectedDays && selectedDays.length > 0 ? selectedDays[0] : new Date()),
    selected: selectedDays,
    onMonthChange: onMonthChange,
    modifiers: modifiers,
    modifiersClassNames: modifiersClassNames,
    onDayClick: function onDayClick(day, _ref2) {
      var selected = _ref2.selected;
      var newSelectedDays = normaliseValue(value);

      if (allowMultiSelection) {
        if (selected) {
          var selectedIndex = findIndex(newSelectedDays, function (selectedDay) {
            return dateFns.isSameDay(selectedDay, day);
          });
          newSelectedDays.splice(selectedIndex, 1);
        } else {
          newSelectedDays.push(day);
        }
      } else {
        newSelectedDays = [day];
      }

      onChange(map(newSelectedDays, dateFns.startOfDay));
    }
  }));
}

exports.default = Calendar;
exports.hasAnyFutureDays = hasAnyFutureDays;
exports.hasAnyPastDays = hasAnyPastDays;
exports.normaliseValue = normaliseValue;
exports.validateProps = validateProps;
//# sourceMappingURL=index.js.map
