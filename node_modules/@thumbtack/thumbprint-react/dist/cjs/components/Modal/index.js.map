{"version":3,"file":"index.js","sources":["../../../../components/Modal/index.tsx"],"sourcesContent":["/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport noop from 'lodash/noop';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport { TextButton } from '../Button/index';\nimport StickyFooter from './components/sticky-footer';\nimport Transition from './components/transition';\nimport ModalCurtain from '../ModalCurtain/index';\n\nimport styles from './index.module.scss';\n\ntype StickyContext = {\n    stickyFooterContainerRef: React.RefObject<HTMLDivElement> | null;\n    setSticky: (isSticky: boolean) => void;\n};\n\nconst { Provider, Consumer } = React.createContext<StickyContext>({\n    stickyFooterContainerRef: null,\n    setSticky: noop,\n});\n\n// These values are duplicated in the Sass.\nconst TRANSITION_OPEN_SPEED = tokens.tpDuration5;\nconst TRANSITION_CLOSE_SPEED = tokens.tpDuration4;\n\n/**\n * `ModalAnimatedWrapper` is an exported component that we export for developers that want access to\n * `Modal` without padding and a close button. We export it as a named export instead of\n * creating a `hasNoPadding` prop partly to discourage the use of `Modal` without padding.\n *\n * This component uses `ModalCurtain` and includes the backdrop, transition, and white modal\n * wrapper that is available at a few widths.\n */\nconst ModalAnimatedWrapper = ({\n    children,\n    isOpen = false,\n    onCloseClick,\n    onCloseFinish,\n    onOpenFinish,\n    shouldCloseOnCurtainClick = true,\n    width = 'medium',\n    heightAboveSmall = 'auto',\n    shouldPageScrollAboveSmall = true,\n}: ModalAnimatedWrapperProps): JSX.Element => (\n    <Transition\n        in={isOpen}\n        timeout={{\n            enter: TRANSITION_OPEN_SPEED,\n            exit: TRANSITION_CLOSE_SPEED,\n        }}\n        onEntered={onOpenFinish}\n        onExited={onCloseFinish}\n    >\n        {(transitionStage): JSX.Element => (\n            <ModalCurtain stage={transitionStage} onCloseClick={onCloseClick}>\n                {({ curtainClassName, curtainOnClick }): JSX.Element => (\n                    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                    <div\n                        className={classNames({\n                            [curtainClassName]: true,\n                            [styles.curtain]: true,\n                            [styles.curtainOpen]: isOpen,\n                        })}\n                    >\n                        {/*\n                            Extra nested <div> to prevent curtain's\n                            bottom padding from being ignored in Firefox and Edge\n                            (See #376 and https://github.com/w3c/csswg-drafts/issues/129)\n\n                            onClick listener is attached to this innermost node\n                            that constitutes curtain\n                        */}\n                        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n                        <div\n                            className={classNames({\n                                [styles.curtainInner]: true,\n                                [styles.curtainInnerShouldPageScrollAboveSmall]: shouldPageScrollAboveSmall,\n                            })}\n                            onClick={shouldCloseOnCurtainClick ? curtainOnClick : undefined}\n                            data-test=\"thumbprint-modal-curtain\"\n                        >\n                            <div\n                                className={classNames({\n                                    [styles.wrapper]: true,\n                                    [styles.wrapperOpen]: isOpen,\n                                    [styles.wrapperWide]: width === 'wide',\n                                    [styles.wrapperNarrow]: width === 'narrow',\n                                    [styles.wrapperMedium]: width === 'medium',\n                                    [styles.wrapperHeightMedium]: heightAboveSmall === 'medium',\n                                    [styles.wrapperHeightTall]: heightAboveSmall === 'tall',\n                                    [styles.wrapperShouldPageScrollAboveSmall]: shouldPageScrollAboveSmall,\n                                })}\n                                data-test=\"thumbprint-modal-wrapper\"\n                            >\n                                <div\n                                    className={classNames({\n                                        [styles.container]: true,\n                                    })}\n                                    data-test=\"thumbprint-modal-container\"\n                                >\n                                    {children}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </ModalCurtain>\n        )}\n    </Transition>\n);\n\nexport interface ModalAnimatedWrapperProps {\n    /**\n     * Content that appears within the modal.\n     */\n    children?: React.ReactNode;\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: () => void;\n    /**\n     * Function that fires once the modal has opened and transitions have ended.\n     */\n    onOpenFinish?: () => void;\n    /**\n     * Function that fires once the modal has closed and transitions have ended.\n     */\n    onCloseFinish?: () => void;\n    /**\n     * Determines if the modal should close when clicking on the curtain, outside of the `children`.\n     */\n    shouldCloseOnCurtainClick?: boolean;\n    /**\n     * Allows the page to scroll vertically at viewports larger than the small breakpoint. If\n     * `false`, the modal will always be equal to or smaller than the viewport and the contents\n     * of the modal will scroll, not the page itself.\n     */\n    shouldPageScrollAboveSmall?: boolean;\n    /**\n     * Should the modal appear open.\n     */\n    isOpen?: boolean;\n    /**\n     * Sets the max-width of the modal container.\n     */\n    width?: 'narrow' | 'medium' | 'wide';\n    /**\n     * Sets height of the modal container above small viewport.\n     * If `auto` (default), the modal height will be determined by its content.\n     * Otherwise, the modal height will be fixed at some constant px.\n     */\n    heightAboveSmall?: 'auto' | 'medium' | 'tall';\n}\n\nexport interface ModalHeaderProps {\n    /**\n     * Content (usually a `ModalTitle` and `ModalDescription`) that appears at the top of the\n     * modal.\n     */\n    children: React.ReactNode;\n}\n\nexport interface ModalTitleProps {\n    /**\n     * Text that describes the modal contents. It is intended for use within the `ModalHeader`.\n     */\n    children: string;\n}\n\nexport interface ModalDescriptionProps {\n    /**\n     * Text intended for use below a `ModalTitle` and within a `ModalHeader`.\n     */\n    children: React.ReactNode;\n}\n\nexport interface ModalContentProps {\n    /**\n     * Content (usually a form) that makes up the main part of the modal.\n     */\n    children: React.ReactNode;\n}\n\nexport interface ModalContentFullBleedProps {\n    /**\n     * Content (usually a form) that makes up the main part of the modal.\n     */\n    children: React.ReactNode;\n    /**\n     * Allows the React `className` prop to be passed through to the rendered element.\n     */\n    className?: string;\n    /**\n     * Allows the React `style` prop to be passed through to the rendered element.\n     */\n    style?: React.CSSProperties;\n}\n\nexport interface ModalFooterProps {\n    /**\n     * Content (ususally buttons) to render within the footer.\n     */\n    children: React.ReactNode;\n    /**\n     * Attaches the footer to the bottom of the modal below the small breakpoint.\n     */\n    isSticky?: boolean;\n}\n\nexport interface ModalProps {\n    /**\n     * Content that appears within the modal.\n     */\n    children?: React.ReactNode;\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: () => void;\n    /**\n     * Function that fires once the modal has opened and transitions have ended.\n     */\n    onOpenFinish?: () => void;\n    /**\n     * Function that fires once the modal has closed and transitions have ended.\n     */\n    onCloseFinish?: () => void;\n    /**\n     * Determines if the close button should be rendered. This is generally discouraged and should\n     * be used carefully. If used, the contents passed into the modal must contain a focusable\n     * element such as a link or button.\n     */\n    shouldHideCloseButton?: boolean;\n    /**\n     * Determines if the modal should close when clicking on the curtain, outside of the `children`.\n     */\n    shouldCloseOnCurtainClick?: boolean;\n    /**\n     * Should the modal appear open.\n     */\n    isOpen?: boolean;\n    /**\n     * Sets the max-width of the modal container.\n     */\n    width?: 'narrow' | 'medium' | 'wide';\n    /**\n     * Sets height of the modal container above small viewport.\n     * If `auto` (default), the modal height will be determined by its content.\n     * Otherwise, the modal height will be fixed at some constant px.\n     */\n    heightAboveSmall?: 'auto' | 'medium' | 'tall';\n}\n\nconst ModalHeader = ({ children }: ModalHeaderProps): JSX.Element => (\n    <div className={styles.modalHeader}>{children}</div>\n);\n\nconst ModalTitle = ({ children }: ModalTitleProps): JSX.Element => (\n    <div className={styles.modalTitle}>{children}</div>\n);\n\nconst ModalDescription = ({ children }: ModalDescriptionProps): JSX.Element => (\n    <div className={styles.modalDescription}>{children}</div>\n);\n\nconst ModalContent = ({ children }: ModalContentProps): JSX.Element => (\n    <div className={styles.modalContent}>{children}</div>\n);\n\nconst ModalContentFullBleed = ({\n    children,\n    className = '',\n    style = {},\n}: ModalContentFullBleedProps): JSX.Element => (\n    <div className={classNames(className, styles.modalContentFullBleed)} style={style}>\n        {children}\n    </div>\n);\n\nclass ModalFooter extends React.Component<ModalFooterProps, { isClient: boolean }> {\n    constructor(props: ModalFooterProps) {\n        super(props);\n\n        this.state = {\n            isClient: false,\n        };\n    }\n\n    componentDidMount(): void {\n        this.setState({\n            isClient: true,\n        });\n    }\n\n    render(): JSX.Element | null {\n        const { isClient } = this.state;\n        const { isSticky, children } = this.props;\n\n        if (!isClient) {\n            return null;\n        }\n\n        return (\n            <Consumer>\n                {({ stickyFooterContainerRef, setSticky }): JSX.Element => {\n                    // When `isSticky` is true, the `ModalFooter` must change its position in the\n                    // DOM so that it is fixed at the bottom of the modal on small viewports. We\n                    // use React's Context API so that it is a property of the `ModalFooter`\n                    // component and not the `Modal` API.\n                    //\n                    // `stickyFooterContainerRef` is the DOM element where the sticky footer will\n                    // render. `setSticky` is a function that updates the state in `Modal`,\n                    // changing the CSS to make the contents scroll and the footer fixed at the\n                    // bottom.\n                    if (\n                        !isSticky ||\n                        stickyFooterContainerRef === null ||\n                        stickyFooterContainerRef.current === null\n                    ) {\n                        return <div className={styles.modalFooterFluid}>{children}</div>;\n                    }\n\n                    // We have to create a separate component here because `setSticky` updates\n                    // state in `Modal` and state updates are not allowed within `render`.\n                    // Moving it to a separate component allows us to call it within\n                    // `componentDidMount`.\n                    // https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d#6a05\n                    return ReactDOM.createPortal(\n                        <StickyFooter setSticky={setSticky}>{children}</StickyFooter>,\n                        stickyFooterContainerRef.current,\n                    );\n                }}\n            </Consumer>\n        );\n    }\n}\n\ninterface ModalStateTypes {\n    hasStickyFooter: boolean;\n    stickyFooterContainerRef: React.RefObject<HTMLDivElement> | null;\n}\n\nclass Modal extends React.Component<ModalProps, ModalStateTypes> {\n    constructor(props: ModalProps) {\n        super(props);\n\n        this.state = {\n            hasStickyFooter: false,\n            stickyFooterContainerRef: React.createRef<HTMLDivElement>(),\n        };\n        this.setSticky = this.setSticky.bind(this);\n    }\n\n    setSticky(newVal: boolean): void {\n        const { hasStickyFooter } = this.state;\n\n        if (newVal !== hasStickyFooter) {\n            this.setState({\n                hasStickyFooter: newVal,\n            });\n        }\n    }\n\n    render(): JSX.Element {\n        const {\n            children,\n            isOpen = false,\n            onCloseClick,\n            onCloseFinish,\n            onOpenFinish,\n            shouldCloseOnCurtainClick = true,\n            shouldHideCloseButton = false,\n            width = 'medium',\n            heightAboveSmall = 'auto',\n        } = this.props;\n\n        const { hasStickyFooter, stickyFooterContainerRef } = this.state;\n\n        return (\n            <ModalAnimatedWrapper\n                onCloseClick={onCloseClick}\n                onOpenFinish={onOpenFinish}\n                onCloseFinish={onCloseFinish}\n                shouldCloseOnCurtainClick={shouldCloseOnCurtainClick}\n                isOpen={isOpen}\n                width={width}\n                heightAboveSmall={heightAboveSmall}\n                // We allow the modal to grow taller than the page only if there is no sticky\n                // footer. This means that the page can scroll vertically when the modal contents\n                // are tall enough. If we have a sticky footer, we prevent the modal from getting\n                // taller than the viewport so that the footer can always appear at the bottom.\n                // In this case, the inside of the modal itself will scroll vertically as needed.\n                shouldPageScrollAboveSmall={!hasStickyFooter}\n            >\n                <Provider\n                    value={{\n                        stickyFooterContainerRef,\n                        setSticky: this.setSticky,\n                    }}\n                >\n                    <div className={styles.contents}>\n                        {/*\n                            Extra nested <div> to prevent bottom padding from being ignored\n                            in Firefox and Edge\n                            (See #376 and https://github.com/w3c/csswg-drafts/issues/129)\n                        */}\n                        <div\n                            className={classNames(styles.contentsPadding, {\n                                [styles.contentsPaddingNotSticky]: !hasStickyFooter,\n                            })}\n                        >\n                            {children}\n                        </div>\n                    </div>\n                    {/*\n                        If a user uses `<ModalFooter isSticky />`, it gets\n                        moved here with React portals.\n                    */}\n                    <div ref={stickyFooterContainerRef} />\n                    {/*\n                        The close button is last in the DOM so that it is\n                        not focused first by the focus trap. We visually\n                        position it at the top with flexbox.\n                    */}\n                    <div\n                        className={classNames({\n                            [styles.closeButton]: true,\n                            [styles.closeButtonNotSticky]: !hasStickyFooter,\n                        })}\n                    >\n                        {shouldHideCloseButton === false && (\n                            <TextButton\n                                accessibilityLabel=\"Close modal\"\n                                dataTest=\"close-modal\"\n                                iconLeft={\n                                    <svg\n                                        viewBox=\"0 0 24 24\"\n                                        width=\"18\"\n                                        height=\"18\"\n                                        stroke=\"currentColor\"\n                                        strokeWidth=\"3\"\n                                        fill=\"none\"\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        className={styles.closeButtonIcon}\n                                    >\n                                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                                    </svg>\n                                }\n                                onClick={onCloseClick}\n                                theme=\"inherit\"\n                            />\n                        )}\n                    </div>\n                </Provider>\n            </ModalAnimatedWrapper>\n        );\n    }\n}\n\nexport default Modal;\nexport {\n    ModalHeader,\n    ModalTitle,\n    ModalDescription,\n    ModalContent,\n    ModalContentFullBleed,\n    ModalFooter,\n    ModalAnimatedWrapper,\n};\n"],"names":["React","createContext","stickyFooterContainerRef","setSticky","noop","Provider","Consumer","TRANSITION_OPEN_SPEED","tokens","TRANSITION_CLOSE_SPEED","ModalAnimatedWrapper","children","isOpen","onCloseClick","onCloseFinish","onOpenFinish","shouldCloseOnCurtainClick","width","heightAboveSmall","shouldPageScrollAboveSmall","Transition","enter","exit","transitionStage","ModalCurtain","curtainClassName","curtainOnClick","classNames","styles","curtain","curtainOpen","curtainInner","curtainInnerShouldPageScrollAboveSmall","undefined","wrapper","wrapperOpen","wrapperWide","wrapperNarrow","wrapperMedium","wrapperHeightMedium","wrapperHeightTall","wrapperShouldPageScrollAboveSmall","container","ModalHeader","modalHeader","ModalTitle","modalTitle","ModalDescription","modalDescription","ModalContent","modalContent","ModalContentFullBleed","className","style","modalContentFullBleed","ModalFooter","props","state","isClient","setState","isSticky","current","modalFooterFluid","ReactDOM","createPortal","StickyFooter","Component","Modal","hasStickyFooter","createRef","bind","newVal","shouldHideCloseButton","contents","contentsPadding","contentsPaddingNotSticky","closeButton","closeButtonNotSticky","TextButton","closeButtonIcon"],"mappings":"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"}