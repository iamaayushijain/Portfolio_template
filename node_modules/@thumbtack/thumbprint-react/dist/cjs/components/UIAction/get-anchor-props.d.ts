/// <reference types="react" />
interface AnchorMouseEventProps {
    onClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
    onMouseEnter?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
    onMouseOver?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
    onMouseLeave?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
    onFocus?: (event: React.FocusEvent<HTMLAnchorElement>) => void;
    onBlur?: (event: React.FocusEvent<HTMLAnchorElement>) => void;
}
interface AnchorProps extends AnchorMouseEventProps {
    href?: string;
    target: string;
    rel?: string;
    title?: string;
}
interface AnchorInputProps extends AnchorMouseEventProps {
    isDisabled?: boolean;
    shouldOpenInNewTab?: boolean;
    to?: string;
    rel?: string;
    target?: string;
    title?: string;
}
/**
 * Enable plain and themed `<a>` elements to share the same props.
 */
declare const getAnchorProps: ({ isDisabled, shouldOpenInNewTab, to, onClick, onMouseEnter, onMouseOver, onFocus, onMouseLeave, onBlur, rel, target, title, }: AnchorInputProps) => AnchorProps;
export default getAnchorProps;
//# sourceMappingURL=get-anchor-props.d.ts.map