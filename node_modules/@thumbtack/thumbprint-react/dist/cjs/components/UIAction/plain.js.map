{"version":3,"file":"plain.js","sources":["../../../../components/UIAction/plain.tsx"],"sourcesContent":["import React from 'react';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport getAnchorProps from './get-anchor-props';\nimport getButtonProps from './get-button-props';\nimport styles from './plain.module.scss';\n\nconst Plain = React.forwardRef<HTMLAnchorElement | HTMLButtonElement, PropTypes>(\n    (\n        {\n            children,\n            isDisabled = false,\n            to,\n            iconLeft,\n            iconRight,\n            theme = 'primary',\n            type = 'button',\n            rel,\n            target,\n            shouldOpenInNewTab = false,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            accessibilityLabel,\n            dataTestId,\n            dataTest,\n            title,\n        },\n        ref,\n    ): JSX.Element => {\n        warning(\n            children || accessibilityLabel || ((iconLeft || iconRight) && children),\n            'The prop `accessibilityLabel` must be provided to the button or link if `iconLeft` or `iconRight` are provided but `children` is not. This helps users on screen readers navigate our content.',\n        );\n\n        let newChildren = children;\n\n        if (iconLeft || iconRight) {\n            newChildren = (\n                <span className={styles.flexCenter}>\n                    {iconLeft}\n\n                    {children && (\n                        <span\n                            className={classNames({\n                                [styles.textContainer]: true,\n                                [styles.textContainerLeft]: iconLeft,\n                                [styles.textContainerRight]: iconRight,\n                            })}\n                        >\n                            {children}\n                        </span>\n                    )}\n\n                    {iconRight}\n                </span>\n            );\n        }\n\n        const commonProps = {\n            disabled: isDisabled,\n            children: newChildren,\n            className: classNames({\n                [styles.plain]: true,\n                [styles.plainThemePrimary]: theme === 'primary',\n                [styles.plainThemeSecondary]: theme === 'secondary',\n                [styles.plainThemeTertiary]: theme === 'tertiary',\n                [styles.plainThemeInherit]: theme === 'inherit',\n            }),\n            'aria-label': accessibilityLabel,\n            'data-testid': dataTestId,\n            'data-test': dataTest,\n            ref,\n        };\n\n        if (to) {\n            return (\n                <a // eslint-disable-line jsx-a11y/anchor-has-content\n                    {...commonProps}\n                    {...getAnchorProps({\n                        isDisabled,\n                        target,\n                        shouldOpenInNewTab,\n                        to,\n                        onClick,\n                        onMouseEnter,\n                        onMouseOver,\n                        onFocus,\n                        onMouseLeave,\n                        onBlur,\n                        rel,\n                        title,\n                    })}\n                    ref={ref as React.Ref<HTMLAnchorElement>}\n                />\n            );\n        }\n\n        return (\n            <button // eslint-disable-line react/button-has-type\n                {...commonProps}\n                {...getButtonProps({\n                    onClick,\n                    type,\n                    onMouseEnter,\n                    onMouseOver,\n                    onFocus,\n                    onMouseLeave,\n                    onBlur,\n                })}\n                ref={ref as React.Ref<HTMLButtonElement>}\n            />\n        );\n    },\n);\n\ninterface PropTypes {\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left of the text.\n     */\n    iconLeft?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right of the text.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Sets the text color.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    /**\n     * Button’s of type `submit` will submit a form when used within a `form` element.\n     */\n    type?: 'button' | 'submit';\n    /**\n     * The anchor `rel` attribute. Setting this value will add to any defalut values provided by\n     * Thumbprint for the `rel` attribute.\n     */\n    rel?: string;\n    /**\n     * The anchor `target` attribute. Set this to `_blank` to open in a new tab, or to an arbitrary\n     * string to open the link in an `<iframe>` with the same `name`.\n     */\n    target?: string;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    children?: React.ReactNode;\n    /**\n     * Function that will run when the button is clicked on.\n     */\n    onClick?: (event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button.\n     */\n    onMouseEnter?: (\n        event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>,\n    ) => void;\n    /**\n     * Function that runs when the user hovers on the button. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: (\n        event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>,\n    ) => void;\n    /**\n     * Function that runs when the user hovers away from the button.\n     */\n    onMouseLeave?: (\n        event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>,\n    ) => void;\n    /**\n     * Function that runs when the button receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLButtonElement | HTMLAnchorElement>) => void;\n    /**\n     * Function that runs when the button loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLButtonElement | HTMLAnchorElement>) => void;\n    /**\n     * Description of the button’s content. It is required if the button has an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Adds the `title` attribute to the element. This should be used infrequently since it's better\n     * to use descriptive text in `children`.\n     */\n    title?: string;\n}\n\nexport default Plain;\n"],"names":["Plain","React","forwardRef","ref","children","isDisabled","to","iconLeft","iconRight","theme","type","rel","target","shouldOpenInNewTab","onClick","onMouseEnter","onMouseOver","onFocus","onMouseLeave","onBlur","accessibilityLabel","dataTestId","dataTest","title","warning","newChildren","styles","flexCenter","classNames","textContainer","textContainerLeft","textContainerRight","commonProps","disabled","className","plain","plainThemePrimary","plainThemeSecondary","plainThemeTertiary","plainThemeInherit","getAnchorProps","getButtonProps"],"mappings":";;;;;;;;;;;;;AAOA,IAAMA,KAAK,GAAGC,cAAK,CAACC,UAAN,CACV,gBAuBIC,GAvBJ;;;MAEQC,gBAAAA;6BACAC;MAAAA,0CAAa;MACbC,UAAAA;MACAC,gBAAAA;MACAC,iBAAAA;wBACAC;MAAAA,gCAAQ;uBACRC;MAAAA,8BAAO;MACPC,WAAAA;MACAC,cAAAA;mCACAC;MAAAA,wDAAqB;MACrBC,eAAAA;MACAC,oBAAAA;MACAC,mBAAAA;MACAC,eAAAA;MACAC,oBAAAA;MACAC,cAAAA;MACAC,0BAAAA;MACAC,kBAAAA;MACAC,gBAAAA;MACAC,aAAAA;EAIJC,OAAO,CACHpB,QAAQ,IAAIgB,kBAAZ,IAAmC,CAACb,QAAQ,IAAIC,SAAb,KAA2BJ,QAD3D,EAEH,gMAFG,CAAP;MAKIqB,WAAW,GAAGrB,QAAlB;;MAEIG,QAAQ,IAAIC,SAAhB,EAA2B;;;IACvBiB,WAAW,GACPxB;MAAM,SAAS,EAAEyB,MAAM,CAACC;OACnBpB,QADL,EAGKH,QAAQ,IACLH;MACI,SAAS,EAAE2B,UAAU,0EAChBF,MAAM,CAACG,aADS,EACO,IADP,yDAEhBH,MAAM,CAACI,iBAFS,EAEWvB,QAFX,yDAGhBmB,MAAM,CAACK,kBAHS,EAGYvB,SAHZ;OAMpBJ,QAPL,CAJR,EAeKI,SAfL,CADJ;;;MAqBEwB,WAAW,GAAG;IAChBC,QAAQ,EAAE5B,UADM;IAEhBD,QAAQ,EAAEqB,WAFM;IAGhBS,SAAS,EAAEN,UAAU,4EAChBF,MAAM,CAACS,KADS,EACD,IADC,0DAEhBT,MAAM,CAACU,iBAFS,EAEW3B,KAAK,KAAK,SAFrB,0DAGhBiB,MAAM,CAACW,mBAHS,EAGa5B,KAAK,KAAK,WAHvB,0DAIhBiB,MAAM,CAACY,kBAJS,EAIY7B,KAAK,KAAK,UAJtB,0DAKhBiB,MAAM,CAACa,iBALS,EAKW9B,KAAK,KAAK,SALrB,iBAHL;kBAUFW,kBAVE;mBAWDC,UAXC;iBAYHC,QAZG;IAahBnB,GAAG,EAAHA;GAbJ;;MAgBIG,EAAJ,EAAQ;WAEAL,wEACQ+B,WADR,EAEQQ,sBAAc,CAAC;MACfnC,UAAU,EAAVA,UADe;MAEfO,MAAM,EAANA,MAFe;MAGfC,kBAAkB,EAAlBA,kBAHe;MAIfP,EAAE,EAAFA,EAJe;MAKfQ,OAAO,EAAPA,OALe;MAMfC,YAAY,EAAZA,YANe;MAOfC,WAAW,EAAXA,WAPe;MAQfC,OAAO,EAAPA,OARe;MASfC,YAAY,EAAZA,YATe;MAUfC,MAAM,EAANA,MAVe;MAWfR,GAAG,EAAHA,GAXe;MAYfY,KAAK,EAALA;KAZc,CAFtB;MAgBI,GAAG,EAAEpB;OAjBb;;;SAuBAF,6EACQ+B,WADR,EAEQS,sBAAc,CAAC;IACf3B,OAAO,EAAPA,OADe;IAEfJ,IAAI,EAAJA,IAFe;IAGfK,YAAY,EAAZA,YAHe;IAIfC,WAAW,EAAXA,WAJe;IAKfC,OAAO,EAAPA,OALe;IAMfC,YAAY,EAAZA,YANe;IAOfC,MAAM,EAANA;GAPc,CAFtB;IAWI,GAAG,EAAEhB;KAZb;CA9FM,CAAd;;;;"}