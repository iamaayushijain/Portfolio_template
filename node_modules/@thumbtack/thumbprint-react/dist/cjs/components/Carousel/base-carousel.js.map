{"version":3,"file":"base-carousel.js","sources":["../../../../components/Carousel/base-carousel.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect } from 'react';\nimport rotate from 'rotate-array';\nimport range from 'lodash/range';\nimport styles from './base-carousel.module.scss';\n\ninterface PropTypes {\n    /**\n     * The items in the carousel that appear horizontally.\n     */\n    children: React.ReactNode;\n    /**\n     * The index of the left-most item to display in the carousel. Supports all numbers.\n     */\n    selectedIndex?: number;\n    /**\n     * The duration of the animation (in milliseconds).\n     */\n    animationDuration?: number;\n    /**\n     * The number of items that are visible at once.\n     */\n    visibleCount?: number;\n    /**\n     * The amount space separating each item. Supports CSS values such as `8px` or `0.5em`.\n     */\n    spacing?: string;\n}\n\nexport default function BaseCarousel({\n    children,\n    selectedIndex = 0,\n    animationDuration = 400,\n    visibleCount = 1,\n    spacing = '0px',\n}: PropTypes): JSX.Element {\n    // When animating, `prevSelectedIndex` is the value of `selectedIndex` before the\n    // animation began. Once the animation is complete, it becomes the same as `selectedIndex`.\n    const [prevSelectedIndex, setPrevSelectedIndex] = useState<number>(selectedIndex);\n    const [isAnimating, setIsAnimating] = useState<boolean>(false);\n    const [isSuspensed, setIsSuspensed] = useState<boolean>(false);\n\n    function reorder(items: number[]): number[] {\n        // The `prevSelectedIndex` doesn't update until the animation is done, so we want to\n        // use that ordering until the animation is complete.\n        return rotate<number>(items, -1 * Math.floor(prevSelectedIndex));\n    }\n\n    useEffect(() => {\n        if (selectedIndex !== prevSelectedIndex) {\n            setIsAnimating(true);\n            setIsSuspensed(false);\n\n            setTimeout(() => {\n                setIsAnimating(false);\n                setIsSuspensed(true);\n                setPrevSelectedIndex(selectedIndex);\n\n                // We suspend the CSS animation property for a very brief window before\n                // re-enabling. This gap allows the component to re-render the new list\n                // without the items \"sliding\" back into place. Once the new items are set up,\n                // we re-enable the animation property ready for the next transition.\n                setTimeout(() => {\n                    setIsSuspensed(false);\n                }, 50);\n            }, animationDuration);\n        }\n    }, [animationDuration, prevSelectedIndex, selectedIndex]);\n\n    const itemWidth = 1 / visibleCount;\n\n    // If `selectedIndex` is `1.5`, this value is `0.5`. This is used when the consumer wants\n    // to partially display children.\n    const fractionalIndexOffset = Math.abs(prevSelectedIndex - Math.floor(prevSelectedIndex));\n\n    // The `adjustedIndex`, when animating, is the number of items to slide. If the value is\n    // negative it means that we should slide to the left. It gets reset to `0` when the\n    // animation is complete.\n    const adjustedIndex = selectedIndex - prevSelectedIndex;\n\n    // This is equal to `fractionalIndexOffset` in the resting state but changes while the\n    // transition is occuring.\n    const translateX = itemWidth * (adjustedIndex + fractionalIndexOffset) * -100;\n\n    const numChildren = React.Children.count(children);\n\n    // An array of the flex order of the items.\n    const childOrders = reorder(range(numChildren));\n\n    // Sometimes we need to duplicate the children so that the carousel can display properly.\n    // This is especially needed when animating. Imagine that a 4-item card with 3 visible\n    // items wants to animate 2 items to the right. Normally, this would require 5 items to\n    // animate without displaying an empty spot. Since there are only 4 items, we temporarily\n    // duplicate the `children` until the animation is complete.\n    const shouldRenderDuplicateChildren = isAnimating;\n\n    return (\n        <div className={styles.root}>\n            <ul\n                className={styles.wrapper}\n                style={{\n                    transform: `translateX(${translateX}%)`,\n                    transition: isSuspensed ? 'none' : `transform ${animationDuration}ms ease`,\n                    width: `calc(100% + ${spacing})`,\n                }}\n            >\n                {React.Children.map(children, (child, i) => (\n                    <li\n                        key={i}\n                        className={styles.item}\n                        style={{\n                            width: `${itemWidth * 100}%`,\n                            paddingRight: spacing,\n                            order: childOrders[i],\n                        }}\n                    >\n                        {child}\n                    </li>\n                ))}\n\n                {/* Temporary elements that appear to the left. */}\n                {shouldRenderDuplicateChildren &&\n                    React.Children.map(children, (child, index) => (\n                        <li\n                            key={numChildren + index}\n                            className={styles.item}\n                            style={{\n                                width: `${itemWidth * 100}%`,\n                                paddingRight: spacing,\n                                order: childOrders[index] + numChildren,\n                                transform: `translateX(${numChildren * -200}%)`,\n                            }}\n                        >\n                            {child}\n                        </li>\n                    ))}\n\n                {/* Temporary elements that appear to the right. */}\n                {shouldRenderDuplicateChildren &&\n                    React.Children.map(children, (child, index) => (\n                        <li\n                            key={numChildren + index * 2}\n                            className={styles.item}\n                            style={{\n                                width: `${itemWidth * 100}%`,\n                                paddingRight: spacing,\n                                order: (childOrders[index] + numChildren) * 2,\n                                transform: `translateX(${numChildren * -100}%)`,\n                            }}\n                        >\n                            {child}\n                        </li>\n                    ))}\n            </ul>\n        </div>\n    );\n}\n"],"names":["BaseCarousel","children","selectedIndex","animationDuration","visibleCount","spacing","useState","prevSelectedIndex","setPrevSelectedIndex","isAnimating","setIsAnimating","isSuspensed","setIsSuspensed","reorder","items","rotate","Math","floor","useEffect","setTimeout","itemWidth","fractionalIndexOffset","abs","adjustedIndex","translateX","numChildren","React","Children","count","childOrders","range","shouldRenderDuplicateChildren","styles","root","wrapper","transform","transition","width","map","child","i","item","paddingRight","order","index"],"mappings":"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"}