{"version":3,"file":"index.js","sources":["../../../../components/ServiceCard/index.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport Image from '../Image/index';\nimport styles from './index.module.scss';\n\ntype ImageSource = {\n    type: 'image/webp' | 'image/jpeg' | 'image/png' | 'image/gif';\n    srcSet: string;\n};\n\nexport interface ServiceCardImageProps {\n    /**\n     * URL pointing to image to be displayed. This image must have an aspect ratio of 8:5.\n     * @deprecated Use `src` instead of `url`.\n     */\n    url?: string;\n    /**\n     * URL pointing to image to be displayed. This image must have an aspect ratio of 8:5.\n     */\n    src: string;\n    /**\n     * Allows the browser to choose the best file format and image size based on the device screen\n     * density and the width of the rendered image. Images must have an aspect ratio of 8:5.\n     */\n    sources?: ImageSource[];\n    /**\n     * Image alt tag that's passed to `aria-label` for better accessibility.\n     */\n    alt?: string;\n}\n\nconst ServiceCardImage = forwardRef<HTMLElement, ServiceCardImageProps>(\n    (props: ServiceCardImageProps, outerRef) => {\n        const { url, src, sources, alt } = props;\n        return (\n            <Image\n                className={styles.image}\n                sources={sources}\n                containerAspectRatio={8 / 5}\n                src={url || src} // `url` deprecated\n                alt={alt}\n                ref={outerRef}\n            />\n        );\n    },\n);\n\n// Needed because of the `forwardRef`.\nServiceCardImage.displayName = 'ServiceCardImage';\n\nexport interface ServiceCardTitleProps {\n    children: string;\n}\n\nfunction ServiceCardTitle({ children }: ServiceCardTitleProps): JSX.Element {\n    return (\n        <div className={styles.title} title={children}>\n            {children}\n        </div>\n    );\n}\n\nexport interface ServiceCardDescriptionProps {\n    /**\n     * Service description or other service info.\n     */\n    children: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render within the\n     * service card. It must be one of the small icons.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Color options for icon. Only required if you want to override default color.\n     */\n    iconColor?: 'blue' | 'green';\n}\n\nfunction ServiceCardDescription({\n    iconColor = 'blue',\n    icon,\n    children,\n}: ServiceCardDescriptionProps): JSX.Element {\n    return (\n        <div\n            className={classNames(styles.descriptionWrap, {\n                [styles.iconBlue]: iconColor === 'blue',\n                [styles.iconGreen]: iconColor === 'green',\n            })}\n        >\n            {icon}\n            <div className={styles.description}>{children}</div>\n        </div>\n    );\n}\n\nexport interface ServiceCardProps {\n    /**\n     * URL pointing to the card link destination.\n     */\n    url: string;\n    /**\n     * Accepts content of `ServiceCardImage`, `ServiceCardTitle`, `ServiceCardDescription`.\n     */\n    children: React.ReactNode;\n    /**\n     * Handler for click events\n     */\n    onClick?: () => void;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n}\n\nexport default function ServiceCard({\n    url,\n    children,\n    onClick,\n    shouldOpenInNewTab = false,\n}: ServiceCardProps): JSX.Element {\n    return (\n        // TODO(giles): Add the noopener attribute and remove this\n        // eslint-disable-next-line react/jsx-no-target-blank\n        <a\n            href={url}\n            onClick={onClick}\n            target={shouldOpenInNewTab ? '_blank' : '_self'}\n            className={styles.root}\n        >\n            {children}\n        </a>\n    );\n}\n\nexport { ServiceCardDescription, ServiceCardTitle, ServiceCardImage };\n"],"names":["ServiceCardImage","forwardRef","props","outerRef","url","src","sources","alt","React","Image","styles","image","displayName","ServiceCardTitle","children","title","ServiceCardDescription","iconColor","icon","classNames","descriptionWrap","iconBlue","iconGreen","description","ServiceCard","onClick","shouldOpenInNewTab","root"],"mappings":";;;;;;;;;;;IA+BMA,gBAAgB,GAAGC,gBAAU,CAC/B,UAACC,KAAD,EAA+BC,QAA/B;MACYC,MAA2BF,MAA3BE;MAAKC,MAAsBH,MAAtBG;MAAKC,UAAiBJ,MAAjBI;MAASC,MAAQL,MAARK;SAEvBC,6BAACC,aAAD;IACI,SAAS,EAAEC,MAAM,CAACC,KADtB;IAEI,OAAO,EAAEL,OAFb;IAGI,oBAAoB,EAAE,IAAI,CAH9B;IAII,GAAG,EAAEF,GAAG,IAAIC,GAJhB;;IAKI,GAAG,EAAEE,GALT;IAMI,GAAG,EAAEJ;IAPb;CAH2B,CAAnC;;AAiBAH,gBAAgB,CAACY,WAAjB,GAA+B,kBAA/B;;AAMA,SAASC,gBAAT;MAA4BC,gBAAAA;SAEpBN;IAAK,SAAS,EAAEE,MAAM,CAACK,KAAvB;IAA8B,KAAK,EAAED;KAChCA,QADL,CADJ;;;AAuBJ,SAASE,sBAAT;;;8BACIC;MAAAA,yCAAY;MACZC,aAAAA;MACAJ,iBAAAA;SAGIN;IACI,SAAS,EAAEW,UAAU,CAACT,MAAM,CAACU,eAAR,2EAChBV,MAAM,CAACW,QADS,EACEJ,SAAS,KAAK,MADhB,yDAEhBP,MAAM,CAACY,SAFS,EAEGL,SAAS,KAAK,OAFjB;KAKpBC,IANL,EAOIV;IAAK,SAAS,EAAEE,MAAM,CAACa;KAAcT,QAArC,CAPJ,CADJ;;;AAgCJ,SAAwBU;MACpBpB,YAAAA;MACAU,iBAAAA;MACAW,gBAAAA;oCACAC;MAAAA,wDAAqB;;;;MAMb,IAAI,EAAEtB,GADV;MAEI,OAAO,EAAEqB,OAFb;MAGI,MAAM,EAAEC,kBAAkB,GAAG,QAAH,GAAc,OAH5C;MAII,SAAS,EAAEhB,MAAM,CAACiB;OAEjBb,QANL;;;;;;;;;"}