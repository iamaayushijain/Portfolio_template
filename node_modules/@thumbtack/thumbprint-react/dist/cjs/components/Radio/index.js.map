{"version":3,"file":"index.js","sources":["../../../../components/Radio/index.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport warning from 'warning';\nimport styles from './index.module.scss';\n\nconst borderColor = {\n    disabled: tokens.tpColorGray300,\n    checked: tokens.tpColorBlue,\n    unchecked: tokens.tpColorGray,\n    error: tokens.tpColorRed,\n};\n\nconst labelCursor = {\n    disabled: 'default',\n    checked: 'pointer',\n    unchecked: 'pointer',\n    error: 'pointer',\n};\n\nconst backgroundColor = {\n    disabled: tokens.tpColorGray200,\n    checked: tokens.tpColorWhite,\n    unchecked: tokens.tpColorWhite,\n    error: tokens.tpColorWhite,\n};\n\n/**\n * Color of the inner circle when the radio is checked.\n */\nconst circleColor = {\n    disabled: tokens.tpColorGray,\n    checked: tokens.tpColorBlue,\n    unchecked: undefined,\n    error: tokens.tpColorRed,\n};\n\nconst textColor = {\n    disabled: tokens.tpColorGray,\n    checked: 'inherit',\n    unchecked: 'inherit',\n    error: tokens.tpColorRed,\n};\n\ntype UiState = 'disabled' | 'error' | 'checked' | 'unchecked';\n\nconst getUIState = ({\n    isChecked,\n    isDisabled,\n    hasError,\n}: Pick<RadioProps, 'isDisabled' | 'hasError' | 'isChecked'>): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    if (isChecked) {\n        return 'checked';\n    }\n\n    return 'unchecked';\n};\n\nexport interface RadioProps {\n    /**\n     * Disable the input and the label.\n     */\n    isDisabled?: boolean;\n    /**\n     * Text or elements that appear within the label. If `children` is not provided, the developer\n     * must use the `Radio`'s `id` prop to associate it with a custom `<label>` element.\n     */\n    children?: React.ReactNode;\n    /**\n     * The `id` is added to the radio button as an HTML attribute and passed to the `onChange`\n     * function.\n     */\n    id?: string;\n    /**\n     * Boolean that determines if the radio is checked.\n     */\n    isChecked?: boolean;\n    /**\n     * Adds the `required` HTML attribute.\n     */\n    isRequired?: boolean;\n    /**\n     * Makes the radio and text color red.\n     */\n    hasError?: boolean;\n    /**\n     * Radio buttons that have the same name attribute are in the same radio button group. Only one\n     * radio in a group can be selected at a time. All of the radio buttons in the group must share\n     * a value that is unique to the page. This is required for keyboard navigation.\n     */\n    name: string;\n    /**\n     * Determine that padding that gets applied to the label. This can be used\n     * to increase the labelâ€™s click target. The value supplied should be a\n     * string with a unit such as `8px` or `8px 16px`.\n     */\n    labelPadding?: string;\n    /**\n     * Function that runs when a new radio button is selected. It receives the new boolean value,\n     * the provided `id`, and the underlying `event` as such:\n     * `props.onChange(event.target.checked, props.id, event)`.\n     */\n    onChange: (\n        isChecked: boolean,\n        id: string | undefined,\n        event: React.ChangeEvent<HTMLInputElement>,\n    ) => void;\n    /**\n     * Function that is called when the user presses a key while focused on the Radio.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Determines how the radio button input will be vertically aligned relative to `props.children`.\n     */\n    radioVerticalAlign?: 'top' | 'center';\n    /**\n     * Determines the value that will be submitted if the radio is selected. The default value is\n     * `'on'`.\n     */\n    value?: string | string[] | number;\n}\n\nexport default function Radio({\n    children = null,\n    dataTest,\n    dataTestId,\n    id,\n    isChecked = false,\n    isDisabled = false,\n    isRequired = false,\n    hasError = false,\n    labelPadding = '14px 0',\n    name,\n    onChange,\n    onKeyDown = (): void => {},\n    radioVerticalAlign = 'center',\n    value,\n}: RadioProps): JSX.Element {\n    const uiState = getUIState({ isChecked, isDisabled, hasError });\n\n    warning(\n        children || id,\n        'If `children` is not provided to `Radio`, the `id` prop must be used to link the `Radio` to a `label` element.',\n    );\n\n    return (\n        // eslint-disable-next-line jsx-a11y/label-has-associated-control, jsx-a11y/label-has-for\n        <label\n            className={classNames(styles.root, {\n                [styles.rootRadioVerticalAlignTop]: radioVerticalAlign === 'top',\n                [styles.rootRadioVerticalAlignCenter]: radioVerticalAlign === 'center',\n            })}\n            style={{ padding: labelPadding, cursor: labelCursor[uiState] }}\n        >\n            <input\n                className={styles.input}\n                type=\"radio\"\n                id={id}\n                onChange={(event): void => {\n                    onChange(event.target.checked, id, event);\n                }}\n                onKeyDown={(event): void => {\n                    onKeyDown(event);\n                }}\n                checked={isChecked}\n                name={name}\n                disabled={isDisabled}\n                data-test={dataTest}\n                data-testid={dataTestId}\n                required={isRequired}\n                {...(value ? { value } : {})}\n            />\n\n            <svg\n                className={styles.radioImage}\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                <g fill={backgroundColor[uiState]} fillRule=\"evenodd\">\n                    <circle stroke={borderColor[uiState]} strokeWidth=\"2\" cx=\"10\" cy=\"10\" r=\"9\" />\n\n                    {isChecked && <circle fill={circleColor[uiState]} cx=\"10\" cy=\"10\" r=\"6\" />}\n                </g>\n            </svg>\n\n            {children && (\n                <span className={styles.text} style={{ color: textColor[uiState] }}>\n                    {children}\n                </span>\n            )}\n        </label>\n    );\n}\n"],"names":["borderColor","disabled","tokens","checked","unchecked","error","labelCursor","backgroundColor","circleColor","undefined","textColor","getUIState","isChecked","isDisabled","hasError","Radio","children","dataTest","dataTestId","id","isRequired","labelPadding","name","onChange","onKeyDown","radioVerticalAlign","value","uiState","warning","classNames","styles","root","rootRadioVerticalAlignTop","rootRadioVerticalAlignCenter","padding","cursor","React","input","event","target","radioImage","text","color"],"mappings":"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"}