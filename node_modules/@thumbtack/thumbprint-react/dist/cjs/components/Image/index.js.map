{"version":3,"file":"index.js","sources":["../../../../components/Image/index.tsx"],"sourcesContent":["import React, { useState, forwardRef, useEffect, useCallback } from 'react';\nimport find from 'lodash/find';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport canUseDOM from '../../utils/can-use-dom';\nimport useLazyLoad from './use-lazy-load';\nimport styles from './index.module.scss';\n\n// --------------------------------------------------------------------------------------------\n// Steps in rendering Image\n//\n// 1. Picture is rendered without src, srcSets, and with a padding-top placholder on the <img>\n// based on the containerAspectRatio.\n// 2. The \"sizes\" attr is calculated on initial render to determine width of image.\n// 3. When lazyload is triggered the src and scrSet props are populated based on the sizes value.\n// 4. The image is set to opacity:0 to start to prevent flash of alt text\n// 5. The image onLoad and onError events remove padding-top placholder and sets opacity to 1.\n// --------------------------------------------------------------------------------------------\n\ntype ImageSource = {\n    type: 'image/webp' | 'image/jpeg' | 'image/png' | 'image/gif';\n    srcSet: string;\n};\n\nexport interface ImageProps\n    extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {\n    /**\n     * If `sources` is provided, this image will be loaded by search engines and lazy-loaded for\n     * users on browsers that don't support responsive images. If `sources` is not provided, this\n     * image will be lazy-loaded.\n     */\n    src: string;\n    /**\n     * Allows the browser to choose the best file format and image size based on the device screen\n     * density and the width of the rendered image.\n     */\n    sources?: ImageSource[];\n    alt?: string;\n    /**\n     * Crops the image at the provided height. The `objectFit` and `objectPosition` props can be\n     * used to control how the image is cropped.\n     */\n    height?: string;\n    /**\n     * Creates a [placeholder box](https://css-tricks.com/aspect-ratio-boxes/) for the image.\n     * The placeholder prevents the browser scroll from jumping when the image is lazy-loaded.\n     */\n    containerAspectRatio?: number;\n    /**\n     * Disables lazy-loading and overrides the default calculation of the `sizes` attribute.\n     * Primarily for important images in a server-side rendered environment that must be\n     * loaded before JavaScript is parsed and executed on the client. The value gets used\n     * as the `sizes` attribute. [See allowable values](https://mzl.la/2Hh6neO).\n     */\n    forceEarlyRender?: React.ImgHTMLAttributes<HTMLImageElement>['sizes'];\n    /**\n     * Provides control over how the image should be resized to fit the container. This controls the\n     * `object-fit` CSS property. It is only useful if `height` is used to \"crop\" the image.\n     */\n    objectFit?: 'cover' | 'contain';\n    /**\n     * Provides control over how the image position in the container. This controls the\n     * `object-position` CSS property. It is only useful if `height` is used to \"crop\" the image.\n     */\n    objectPosition?: 'top' | 'center' | 'bottom' | 'left' | 'right';\n    className?: string;\n}\n\ntype ObjectFitPropsType = {\n    style?: {\n        // Not using React.CSSProperties types for these two, because we use a restricted subset.\n        objectFit?: 'cover' | 'contain';\n        objectPosition?: 'top' | 'center' | 'bottom' | 'left' | 'right';\n        fontFamily?: React.CSSProperties['fontFamily'];\n        height?: '100%';\n    };\n};\n\ntype AspectRatioBoxPropsType = {\n    style?: {\n        paddingTop?: React.CSSProperties['paddingTop'];\n        overflow?: React.CSSProperties['overflow'];\n        height?: React.CSSProperties['height'];\n    };\n};\n\nconst Image = forwardRef<HTMLElement, ImageProps>((props: ImageProps, outerRef) => {\n    const {\n        src,\n        sources = [],\n        height,\n        containerAspectRatio,\n        objectFit = 'cover',\n        objectPosition = 'center',\n        alt = '',\n        className,\n        forceEarlyRender = null,\n        ...rest\n    } = props;\n\n    // The outermost DOM node that this component references. We use `useState` instead of\n    // `useRef` because callback refs allow us to add more than one `ref` to a DOM node.\n    const [containerRef, setContainerRef] = useState<Element | null>(null);\n\n    // --------------------------------------------------------------------------------------------\n    // Sizes\n    // --------------------------------------------------------------------------------------------\n\n    // Used by srcSet to determine which image in the list will be requested. This value has to be\n    // calculated client-side because we don't know the viewport width.\n\n    const computeSizes = (): string =>\n        containerRef && containerRef.clientWidth ? `${containerRef.clientWidth}px` : '0px';\n\n    // If `forceEarlyRender` is truthy use that value, otherwise use the computed width.\n    const sizes = forceEarlyRender || computeSizes();\n\n    // --------------------------------------------------------------------------------------------\n    // Lazy-loading: library setup and polyfill\n    // --------------------------------------------------------------------------------------------\n\n    const [browserSupportIntersectionObserver, setBrowserSupportIntersectionObserver] = useState<\n        boolean\n    >(\n        // eslint-disable-next-line compat/compat\n        canUseDOM && typeof window.IntersectionObserver !== 'undefined',\n    );\n\n    const shouldLoad = useLazyLoad(containerRef, browserSupportIntersectionObserver);\n\n    // Loads the `IntersectionObserver` polyfill asynchronously on browsers that don't support it.\n    if (canUseDOM && typeof window.IntersectionObserver === 'undefined') {\n        import('intersection-observer').then(() => {\n            setBrowserSupportIntersectionObserver(true);\n        });\n    }\n\n    // If `forceEarlyRender` is truthy, bypass lazy loading and load the image.\n    const shouldLoadImage = shouldLoad || forceEarlyRender;\n\n    // --------------------------------------------------------------------------------------------\n    // Object Fit: polyfill and CSS styles\n    // --------------------------------------------------------------------------------------------\n\n    const objectFitProps: ObjectFitPropsType = {};\n\n    // Checking for the use of the `height` prop is not enough since users can also change the\n    // image height using `className`, or `style`.\n    const shouldObjectFit = !!height || !!props.objectFit;\n\n    const shouldPolyfillObjectFit =\n        canUseDOM &&\n        document.documentElement &&\n        document.documentElement.style &&\n        'objectFit' in document.documentElement.style !== true;\n\n    warning(\n        (!height && !containerAspectRatio) ||\n            (height && !containerAspectRatio) ||\n            (!height && containerAspectRatio),\n        'You can pass either a `height` or `containerAspectRatio` to the `Image` component, but not both.',\n    );\n\n    useEffect(() => {\n        // We polyfill `object-fit` for browsers that don't support it. We only do it if we're\n        // using a `height` or `containerAspectRatio`. The `shouldLoadImage` variable ensures\n        // that we don't try to polyfill the image before the `src` exists. This can happy\n        // when we lazy-load.\n        if (shouldObjectFit && containerRef && shouldLoadImage && shouldPolyfillObjectFit) {\n            import('object-fit-images').then(({ default: ObjectFitImages }) => {\n                ObjectFitImages(containerRef.querySelector('img'));\n            });\n        }\n    }, [shouldObjectFit, containerRef, shouldLoadImage, shouldPolyfillObjectFit]);\n\n    if (shouldObjectFit) {\n        objectFitProps.style = {\n            objectFit,\n            objectPosition,\n        };\n\n        if (!height) {\n            // Add `height: 100%` as an inline style if the user wants to `objectFit` but hasn't\n            // passed in the `height` prop. Almost always, this means that the user is setting the\n            // height with CSS or an inline style. Since inline styles and `className` get added to\n            // `picture`, not `img`, the `img` element would become taller than the picture,\n            // preventing the `objectFit` from working. Adding `height: 100%` to the `img` in these\n            // cases allows `objectFit` to work as well as it would if the `height` was provided as\n            // a prop rather than through `style` or `className`.\n            objectFitProps.style.height = '100%';\n        }\n\n        if (shouldPolyfillObjectFit) {\n            // Weird, but this is how the polyfill knows what to do with the image in IE.\n            objectFitProps.style.fontFamily = `\"object-fit: ${objectFit}; object-position: ${objectPosition}\"`;\n        }\n    }\n\n    // --------------------------------------------------------------------------------------------\n    // Image Aspect Ratio used for image placeholder\n    // --------------------------------------------------------------------------------------------\n\n    const aspectRatioBoxProps: AspectRatioBoxPropsType = {};\n\n    if (containerAspectRatio) {\n        // This ensures that lazy-loaded images don't cause the browser scroll to jump once the\n        // image has loaded. It uses the following technique:\n        // https://css-tricks.com/aspect-ratio-boxes/\n        const h = 100000;\n        const w = h * containerAspectRatio;\n\n        aspectRatioBoxProps.style = {\n            paddingTop: `${(h / w) * 100}%`,\n            overflow: 'hidden', // Prevents alt text from taking up space before `src` is populated\n            height: 0,\n        };\n    }\n\n    // --------------------------------------------------------------------------------------------\n    // Sources and srcSets\n    // --------------------------------------------------------------------------------------------\n\n    // We separate `webp` from the `jpeg`/`png` so that we can apply the `imgTagSource` directly\n    // onto the `img` tag. While this makes the code messier, it is needed to work around a bug in\n    // Safari:\n    // - https://bugs.webkit.org/show_bug.cgi?id=190031\n    // - https://bugs.webkit.org/show_bug.cgi?id=177068\n\n    const webpSource = find(sources, s => s.type === 'image/webp');\n    const imgTagSource = find(sources, s => s.type === 'image/jpeg' || s.type === 'image/png');\n\n    // --------------------------------------------------------------------------------------------\n    // Image load and error states\n    // --------------------------------------------------------------------------------------------\n\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [isError, setIsError] = useState<boolean>(false);\n\n    // --------------------------------------------------------------------------------------------\n    // Combining refs: This component has three refs that need to be combined into one. This\n    // method of combining refs is suggested by `react-intersection-observer`:\n    // https://github.com/thebuilder/react-intersection-observer#how-can-i-assign-multiple-refs-to-a-component\n    // --------------------------------------------------------------------------------------------\n\n    const setRefs = useCallback(\n        node => {\n            // Using a callback `ref` on this `picture` allows us to have multiple `ref`s on one\n            // element.\n            setContainerRef(node);\n\n            // Check if the consumer sets a ref.\n            if (typeof outerRef === 'function') {\n                outerRef(node);\n            }\n        },\n        [outerRef, setContainerRef],\n    );\n\n    return (\n        <>\n            <picture {...rest} className={classNames(styles.picture, className)} ref={setRefs}>\n                {webpSource && (\n                    <source\n                        type={webpSource.type}\n                        // Only add this attribute if lazyload has been triggered.\n                        srcSet={shouldLoadImage ? webpSource.srcSet : undefined}\n                        sizes={sizes}\n                    />\n                )}\n                <img\n                    // The order of `sizes`, `srcSet`, and `src` is important to work around a bug in\n                    // Safari. Once the bug is fixed, we should simplify this by using `src` on the\n                    // `img` tag and using `source` tags.\n                    sizes={sizes}\n                    // Only add this attribute if lazyload has been triggered.\n                    srcSet={shouldLoadImage && imgTagSource ? imgTagSource.srcSet : undefined}\n                    // Only add this attribute if lazyload has been triggered.\n                    src={shouldLoadImage ? src : undefined}\n                    // Height is generally only used for full-width hero images.\n                    height={height}\n                    alt={alt}\n                    // Adds object fit values if specified and adds/removes placeholder padding.\n                    // For SSR we want this to fire instantly.\n                    style={{\n                        ...(shouldObjectFit ? objectFitProps.style : {}),\n                        ...(isLoaded || isError || forceEarlyRender\n                            ? {}\n                            : aspectRatioBoxProps.style),\n                    }}\n                    onLoad={(): void => {\n                        setIsLoaded(true);\n                    }}\n                    onError={(): void => {\n                        setIsError(true);\n                    }}\n                    // @ts-expect-error We expect an error because the attribute is non-standard and\n                    // doesn't yet exist in the React types.\n                    fetchpriority={forceEarlyRender ? 'high' : 'auto'}\n                    className={classNames({\n                        // Opacity to 0, prevents flash of alt text when `height` prop used\n                        [styles.imageStart]: true,\n                        // Opacity to 1 to reveal image or show alt text on error\n                        // For SSR we want this to fire instantly.\n                        [styles.imageEnd]: isLoaded || isError || forceEarlyRender,\n                    })}\n                />\n            </picture>\n            {!forceEarlyRender && (\n                <noscript>\n                    <img src={src} alt={alt} />\n                </noscript>\n            )}\n        </>\n    );\n});\n\n// Needed because of the `forwardRef`.\nImage.displayName = 'Image';\n\nexport default Image;\n"],"names":["Image","forwardRef","props","outerRef","src","sources","height","containerAspectRatio","objectFit","objectPosition","alt","className","forceEarlyRender","rest","useState","containerRef","setContainerRef","computeSizes","clientWidth","sizes","canUseDOM","window","IntersectionObserver","browserSupportIntersectionObserver","setBrowserSupportIntersectionObserver","shouldLoad","useLazyLoad","then","shouldLoadImage","objectFitProps","shouldObjectFit","shouldPolyfillObjectFit","document","documentElement","style","warning","useEffect","ObjectFitImages","default","querySelector","fontFamily","aspectRatioBoxProps","h","w","paddingTop","overflow","webpSource","find","s","type","imgTagSource","isLoaded","setIsLoaded","isError","setIsError","setRefs","useCallback","node","React","classNames","styles","picture","srcSet","undefined","imageStart","imageEnd","displayName"],"mappings":"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"}