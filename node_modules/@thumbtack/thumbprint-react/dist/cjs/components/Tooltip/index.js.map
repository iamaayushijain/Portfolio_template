{"version":3,"file":"index.js","sources":["../../../../components/Tooltip/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { tpSpace3 } from '@thumbtack/thumbprint-tokens';\nimport assign from 'lodash/assign';\nimport classNames from 'classnames';\nimport { Manager, Reference, Popper, RefHandler } from 'react-popper';\n\nimport { TextButton } from '../Button';\nimport ConditionalPortal from '../../utils/ConditionalPortal';\nimport useCloseOnEscape from '../../utils/use-close-on-escape';\nimport canUseDOM from '../../utils/can-use-dom';\n\nimport styles from './index.module.scss';\n\n// Timeout in milliseconds to wait before showing the tooltip after the user hovers. This prevents\n// tooltips from flickering in and out when the user moves their cursor rapidly over the launcher.\n// Higher values are more likely to prevent flickering, but increased the perceived lag when the\n// user _is_ trying to open the tooltip.\nconst OPEN_TIMEOUT = 100;\n\ninterface WhenChildrenChangePropTypes {\n    children: React.ReactNode;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    do: () => any;\n}\n\nclass WhenChildrenChange extends React.Component<WhenChildrenChangePropTypes> {\n    componentDidUpdate(prevProps: WhenChildrenChangePropTypes): null {\n        const { children, do: doProp } = this.props;\n\n        if (children !== prevProps.children) {\n            doProp();\n        }\n        return null;\n    }\n\n    render(): React.ReactNode {\n        const { children } = this.props;\n\n        return children;\n    }\n}\n\nconst doesWindowSupportTouch = (): boolean =>\n    typeof window !== 'undefined' && 'ontouchstart' in window;\n\ninterface ChildrenPropTypes {\n    ref: RefHandler;\n    onMouseEnter: () => void;\n    onFocus: () => void;\n    onMouseLeave: () => void;\n    onBlur: () => void;\n    onClick: () => void;\n    ariaLabel: string;\n}\n\nexport interface TooltipProps {\n    /**\n     * A function that renders JSX and receives an object with `ref`, `onMouseEnter`, `onFocus`,\n     * `onMouseLeave`, `onBlur`, `onClick`, and `ariaLabel`. All of these props must be added to\n     * the component within the render prop.\n     */\n    children: (args: ChildrenPropTypes) => JSX.Element;\n    /**\n     * Plain text that will appear within the tooltip. Links and formatted content are not allowed.\n     */\n    text: string;\n    /**\n     * Tooltip cta in form of text button/link for rich tooltip\n     */\n    cta?:\n        | {\n              type: 'link';\n              href: string;\n              text: string;\n              onClick?: () => void;\n          }\n        | {\n              type: 'button';\n              onClick: () => void;\n              text: string;\n          };\n    /**\n     * Controls the look of the tooltip.\n     */\n    theme?: 'light' | 'dark';\n    /**\n     * Determines where the tooltip will attempt to position itself relative to the `children`. The\n     * tooltip will reposition itself to fit within the contianer.\n     */\n    position?: 'top' | 'bottom';\n    /**\n     * Number in milliseconds that determines how long to wait before closing the tooltip when the\n     * `onMouseLeave` event fires. A small delay prevents the tooltip from closing if the user\n     * moves their cursor from the button to the tooltip. This value should only be set to `0` when\n     * two or more tooltip components are used near each other.\n     */\n    closeDelayLength?: 0 | 200;\n    /**\n     * By default tooltips will render right before the `</body>` tag.\n     *\n     * Setting the `container` to `inline` causes the tooltip to remain where it was added to the\n     * DOM.\n     *\n     * This option is helpful to work around z-index and positioning issues.\n     */\n    container?: 'inline' | 'body';\n    /**\n     * Adds a `z-index` to the tooltip. Before using this prop, try to use `container=\"inline\"`.\n     */\n    zIndex?: number;\n    /**\n     * Persist tooltip and not hide on click\n     */\n    persistTooltipOnClick?: boolean;\n}\n\nexport default function Tooltip({\n    container = 'body',\n    position = 'top',\n    theme = 'dark',\n    zIndex,\n    text,\n    children,\n    closeDelayLength = 200,\n    persistTooltipOnClick,\n    cta,\n}: TooltipProps): JSX.Element {\n    const [isOpen, setIsOpen] = useState<{\n        isOpen: boolean;\n        type?: 'click' | 'hover';\n    }>({\n        isOpen: false,\n    });\n    const [openTimeout, setOpenTimeout] = useState<number | undefined>(undefined);\n    const [closeTimeout, setCloseTimeout] = useState<number | undefined>(undefined);\n\n    const show = (type: 'click' | 'hover'): void => {\n        if (closeTimeout) {\n            window.clearTimeout(closeTimeout);\n        }\n\n        setIsOpen({\n            isOpen: true,\n            type,\n        });\n    };\n\n    const hide = (): void => {\n        setIsOpen({\n            isOpen: false,\n        });\n    };\n\n    const onFocus = (): void => {\n        if (!doesWindowSupportTouch()) {\n            show('hover');\n        }\n    };\n\n    const onMouseEnter = (): void => {\n        if (!doesWindowSupportTouch()) {\n            // Trigger the tooltip to show after a small delay to prevent flickering.\n            setOpenTimeout(window.setTimeout(() => show('hover'), OPEN_TIMEOUT));\n        }\n    };\n\n    const onMouseLeave = (): void => {\n        if (!(persistTooltipOnClick && isOpen.type === 'click')) {\n            // By default this adds a small delay before closing to improve the user experience.\n            setCloseTimeout(window.setTimeout(hide, closeDelayLength));\n\n            if (openTimeout) {\n                // When the mouse leaves we should clear any in-progress open timeouts, to prevent the\n                // tooltip from showing after the user is no longer hovering over the launcher.\n                clearTimeout(openTimeout);\n            }\n        }\n    };\n\n    const onClick = (): void => {\n        if (doesWindowSupportTouch()) {\n            if (isOpen.isOpen) {\n                hide();\n            } else {\n                show('click');\n            }\n        } else if (persistTooltipOnClick) {\n            // Keep tooltip opened in case of desktop when persistTooltipOnClick is true\n            show('click');\n        }\n    };\n\n    const onBlur = (): void => {\n        // By default this adds a small delay before closing which gives time\n        // to focus by keyboard tab inside tooltip content for rich tooltip.\n        setCloseTimeout(window.setTimeout(hide, closeDelayLength));\n    };\n\n    useCloseOnEscape(hide, canUseDOM);\n\n    // Appends the tooltip right before `</body>` when true.\n    const shouldDisplace = container === 'body';\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }): JSX.Element =>\n                    children({\n                        ref,\n                        onMouseEnter,\n                        onFocus,\n                        onMouseLeave,\n                        onBlur,\n                        onClick,\n                        ariaLabel: text,\n                    })\n                }\n            </Reference>\n\n            <ConditionalPortal shouldDisplace={shouldDisplace}>\n                {canUseDOM && isOpen.isOpen && (\n                    <Popper\n                        placement={position}\n                        modifiers={{\n                            offset: { offset: `0, ${tpSpace3}` },\n                            preventOverflow: { boundariesElement: 'window' },\n                        }}\n                        positionFixed={false}\n                    >\n                        {({ ref, style, placement, arrowProps, scheduleUpdate }): JSX.Element => (\n                            // This function is documented within `react-popper`:\n                            // https://github.com/FezVrasta/react-popper\n                            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n                            <div\n                                role=\"tooltip\"\n                                data-test-id=\"tooltip\"\n                                className={classNames({\n                                    [styles.tooltip]: true,\n                                    [styles.tooltipDark]: theme === 'dark',\n                                    [styles.tooltipLight]: theme === 'light',\n                                })}\n                                ref={ref}\n                                style={assign({}, style, { zIndex })}\n                                data-placement={placement}\n                                onMouseEnter={(): void => show('hover')}\n                                onMouseLeave={onMouseLeave}\n                                onClick={(event): void => {\n                                    // This is to ensure the default event propagation is stopped when the tooltip\n                                    // is created by portals.\n                                    // https://reactjs.org/docs/portals.html#event-bubbling-through-portals\n                                    // https://github.com/facebook/react/issues/11387\n                                    if (shouldDisplace) {\n                                        event.stopPropagation();\n                                    }\n                                    // This is to ensure the tooltip would be closed if it's clicked in touch screen\n                                    // devices so it could easier to be toggled off.\n                                    if (doesWindowSupportTouch()) {\n                                        hide();\n                                    }\n                                }}\n                            >\n                                {/* We need to let the popper instance know when the contents of the tooltip change,\n                                so it can reposition itself.\n                                https://github.com/thumbtack/thumbprint-archive/issues/1033 */}\n                                <WhenChildrenChange do={scheduleUpdate}>\n                                    <div\n                                        // For rich tooltip, we need to clear closeTimeout while user focus on\n                                        // tooltip cta in popover, to stay tooltip to be opened in case of keyboard tab.\n                                        onFocus={(): void => {\n                                            if (closeTimeout) {\n                                                window.clearTimeout(closeTimeout);\n                                            }\n                                        }}\n                                        // For rich tooltip, we need to hide tooltip popover,\n                                        // to close tooltip in case of keyboard tab\n                                        // went away from tooltip cta.\n                                        onBlur={hide}\n                                        className={styles.tooltipContent}\n                                    >\n                                        {text}\n                                        <div>\n                                            {cta && cta.type === 'link' && (\n                                                <a\n                                                    href={cta.href}\n                                                    onClick={(): void => {\n                                                        if (cta.onClick) {\n                                                            cta.onClick();\n                                                        }\n                                                    }}\n                                                >\n                                                    {cta.text}\n                                                </a>\n                                            )}\n\n                                            {cta && cta.type === 'button' && (\n                                                <TextButton onClick={cta.onClick}>\n                                                    {cta.text}\n                                                </TextButton>\n                                            )}\n                                        </div>\n                                    </div>\n                                </WhenChildrenChange>\n                                <div\n                                    className={classNames({\n                                        [styles.nubbin]: true,\n                                        [styles.nubbinTop]: placement === 'top',\n                                        [styles.nubbinBottom]: placement === 'bottom',\n                                        [styles.nubbinDark]: theme === 'dark',\n                                        [styles.nubbinLight]: theme === 'light',\n                                    })}\n                                    ref={arrowProps.ref}\n                                    style={arrowProps.style}\n                                />\n                            </div>\n                        )}\n                    </Popper>\n                )}\n            </ConditionalPortal>\n        </Manager>\n    );\n}\n"],"names":["OPEN_TIMEOUT","WhenChildrenChange","prevProps","props","children","doProp","do","React","Component","doesWindowSupportTouch","window","Tooltip","container","position","theme","zIndex","text","closeDelayLength","persistTooltipOnClick","cta","useState","isOpen","setIsOpen","undefined","openTimeout","setOpenTimeout","closeTimeout","setCloseTimeout","show","type","clearTimeout","hide","onFocus","onMouseEnter","setTimeout","onMouseLeave","onClick","onBlur","useCloseOnEscape","canUseDOM","shouldDisplace","Manager","Reference","ref","ariaLabel","ConditionalPortal","Popper","offset","tpSpace3","preventOverflow","boundariesElement","style","placement","arrowProps","scheduleUpdate","classNames","styles","tooltip","tooltipDark","tooltipLight","assign","event","stopPropagation","tooltipContent","href","TextButton","nubbin","nubbinTop","nubbinBottom","nubbinDark","nubbinLight"],"mappings":"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"}