{"version":3,"file":"index.js","sources":["../../../../components/Avatar/index.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport isNumber from 'lodash/isNumber';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport Badge from './subcomponents/badge';\nimport styles from './index.module.scss';\nimport Image from '../Image/index';\n\nconst dimensions = {\n    xsmall: '32px',\n    small: '48px',\n    medium: '72px',\n    large: '100px',\n    xlarge: '140px',\n};\n\nconst CheckIcon = (): JSX.Element => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 13\">\n        <path\n            d=\"M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\ninterface StyleType {\n    color: string;\n    backgroundColor: string;\n}\n\nconst STYLES: StyleType[] = [\n    {\n        color: tokens.tpColorIndigo600,\n        backgroundColor: tokens.tpColorIndigo100,\n    },\n    {\n        color: tokens.tpColorGreen600,\n        backgroundColor: tokens.tpColorGreen100,\n    },\n    {\n        color: tokens.tpColorYellow600,\n        backgroundColor: tokens.tpColorYellow100,\n    },\n    {\n        color: tokens.tpColorRed600,\n        backgroundColor: tokens.tpColorRed100,\n    },\n    {\n        color: tokens.tpColorPurple600,\n        backgroundColor: tokens.tpColorPurple100,\n    },\n    {\n        color: tokens.tpColorBlue600,\n        backgroundColor: tokens.tpColorBlue100,\n    },\n];\n\nconst getStyle = (initials?: string): StyleType =>\n    initials\n        ? STYLES[initials.charCodeAt(0) % STYLES.length]\n        : { color: tokens.tpColorBlack, backgroundColor: tokens.tpColorGray200 };\n\nconst EntityAvatar = forwardRef<HTMLElement, EntityAvatarProps>(\n    (props: EntityAvatarProps, outerRef): JSX.Element => {\n        const { imageUrl, size = 'small', initial, fullName, isOnline = false } = props;\n\n        return (\n            <div\n                className={classNames(styles.root, {\n                    [styles.rootXsmall]: size === 'xsmall',\n                    [styles.rootSmall]: size === 'small',\n                    [styles.rootMedium]: size === 'medium',\n                    [styles.rootLarge]: size === 'large',\n                    [styles.rootXlarge]: size === 'xlarge',\n                })}\n                style={\n                    isNumber(size)\n                        ? { width: size, height: size }\n                        : { width: dimensions[size], height: dimensions[size] }\n                }\n            >\n                {imageUrl ? (\n                    <Image\n                        className={styles.squareAvatar}\n                        src={imageUrl}\n                        alt={fullName && `Avatar for ${fullName}`}\n                        height={typeof size === 'string' ? dimensions[size] : `${size}px`}\n                        ref={outerRef}\n                    />\n                ) : (\n                    <span\n                        className={`${styles.initialsAvatar} ${styles.squareAvatar}`}\n                        style={getStyle(initial)}\n                        title={fullName && `Avatar for ${fullName}`}\n                    >\n                        {initial}\n                    </span>\n                )}\n                {isOnline && (\n                    <Badge size={typeof size === 'string' ? size : 'medium'} type=\"entity\" />\n                )}\n            </div>\n        );\n    },\n);\n\nexport interface EntityAvatarProps {\n    /**\n     * HTTPS URL that points a user's avatar. The `imageURL` will take\n     * precendence over `initials` if both are supplied.\n     */\n    imageUrl?: string;\n    /**\n     * The entity's initial. This should be passed in as a one character string.\n     */\n    initial?: string;\n    /**\n     * The entity's full name. This is used as `title` and `alt` text.\n     */\n    fullName?: string;\n    /**\n     * The set of avatar sizes that we support.\n     */\n    size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | number;\n    /**\n     * Displays a badge if the user is online.\n     */\n    isOnline?: boolean;\n}\n\n// Needed because of the `forwardRef`.\nEntityAvatar.displayName = 'EntityAvatar';\n\nconst UserAvatar = forwardRef<HTMLElement, UserAvatarProps>(\n    (props: UserAvatarProps, outerRef): JSX.Element => {\n        const { imageUrl, size = 'small', initials, fullName, isOnline = false, isChecked } = props;\n\n        return (\n            <div\n                className={classNames(styles.root, {\n                    [styles.rootXsmall]: size === 'xsmall',\n                    [styles.rootSmall]: size === 'small',\n                    [styles.rootMedium]: size === 'medium',\n                    [styles.rootLarge]: size === 'large',\n                    [styles.rootXlarge]: size === 'xlarge',\n                })}\n                style={\n                    isNumber(size)\n                        ? { width: size, height: size }\n                        : { width: dimensions[size], height: dimensions[size] }\n                }\n            >\n                {imageUrl ? (\n                    <Image\n                        className={styles.circleAvatar}\n                        src={imageUrl}\n                        alt={fullName && `Avatar for ${fullName}`}\n                        height={typeof size === 'string' ? dimensions[size] : `${size}px`}\n                        ref={outerRef}\n                    />\n                ) : (\n                    <span\n                        className={`${styles.initialsAvatar} ${styles.circleAvatar}`}\n                        style={getStyle(initials)}\n                        title={fullName && `Avatar for ${fullName}`}\n                    >\n                        {initials}\n                    </span>\n                )}\n                {(isOnline || isChecked) && (\n                    <Badge size={typeof size === 'string' ? size : 'medium'} type=\"user\">\n                        {isChecked && <CheckIcon />}\n                    </Badge>\n                )}\n            </div>\n        );\n    },\n);\n\nexport interface UserAvatarProps {\n    /**\n     * HTTPS URL that points a user's avatar. The `imageURL` will take\n     * precendence over `initials` if both are supplied.\n     */\n    imageUrl?: string;\n    /**\n     * The user's initials. This should be passed in as a two character string\n     * for best results.\n     */\n    initials?: string;\n    /**\n     * The user's full name. This is used as `title` and `alt` text.\n     */\n    fullName?: string;\n    /**\n     * The set of avatar sizes that we support.\n     */\n    size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | number;\n    /**\n     * Displays a badge of a checkmark next to the `Avatar`.\n     * @deprecated Indicate this information outside of the avatar instead.\n     */\n    isChecked?: boolean;\n    /**\n     * Displays a badge if the user is online.\n     */\n    isOnline?: boolean;\n}\n\n// Needed because of the `forwardRef`.\nUserAvatar.displayName = 'UserAvatar';\n\nexport { UserAvatar, EntityAvatar };\n"],"names":["dimensions","xsmall","small","medium","large","xlarge","CheckIcon","React","STYLES","color","tokens","backgroundColor","getStyle","initials","charCodeAt","length","EntityAvatar","forwardRef","props","outerRef","imageUrl","size","initial","fullName","isOnline","classNames","styles","root","rootXsmall","rootSmall","rootMedium","rootLarge","rootXlarge","isNumber","width","height","Image","squareAvatar","initialsAvatar","Badge","displayName","UserAvatar","isChecked","circleAvatar"],"mappings":"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"}