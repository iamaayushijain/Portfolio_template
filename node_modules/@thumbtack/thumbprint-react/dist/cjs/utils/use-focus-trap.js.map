{"version":3,"file":"use-focus-trap.js","sources":["../../../utils/use-focus-trap.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport createFocusTrap, { FocusTrap } from 'focus-trap';\n\nfunction toggleTrap(trap: FocusTrap, isActive: boolean): void {\n    if (isActive) {\n        trap.activate();\n    } else {\n        trap.deactivate();\n    }\n}\n\n/**\n * React Hook for trapping the focus inside a particular DOM element. Useful for building modal\n * components.\n *\n * @param element  The element to trap focus inside of\n * @param isActive Whether or not to activate the trap\n * @param initialFocus The initial element inside the trap to focus\n */\nexport default function useFocusTrap(\n    element: HTMLElement | null,\n    // eslint-disable-next-line default-param-last\n    isActive = false,\n    initialFocus: HTMLElement | null,\n): void {\n    const [trap, setTrap] = useState<FocusTrap>();\n\n    // If `initialFocus` is not provided, `element` becomes the initial focus.\n    const initialFocusElement = initialFocus || element;\n\n    useEffect((): (() => void) => {\n        // If we've already created a trap, toggle it based on the isActive status\n        if (trap) {\n            toggleTrap(trap, isActive);\n            // Otherwise, if there's no trap, but there is a valid element that needs to be trapped\n        } else if (element && initialFocusElement && isActive) {\n            // Create the trap and store a reference to it\n            const newTrap = createFocusTrap(element, {\n                clickOutsideDeactivates: true,\n                // Set initial focus to the modal wrapper itself instead of focusing on the first\n                // focusable element by default\n                initialFocus: initialFocusElement,\n            });\n            setTrap(newTrap);\n            // And toggle it based on isActive status\n            toggleTrap(newTrap, isActive);\n        }\n\n        // When the component unmounts, we deactivate the trap, if there is one\n        return (): void => {\n            if (trap) {\n                trap.deactivate();\n            }\n        };\n    }, [element, isActive, trap, initialFocusElement]);\n}\n"],"names":["toggleTrap","trap","isActive","activate","deactivate","useFocusTrap","element","initialFocus","useState","setTrap","initialFocusElement","useEffect","newTrap","createFocusTrap","clickOutsideDeactivates"],"mappings":";;;;;;;;;AAGA,SAASA,UAAT,CAAoBC,IAApB,EAAqCC,QAArC;MACQA,QAAJ,EAAc;IACVD,IAAI,CAACE,QAAL;GADJ,MAEO;IACHF,IAAI,CAACG,UAAL;;;;;;;;;;;;;AAYR,SAAwBC,aACpBC;MAEAJ,+EAAW;MACXK;;kBAEwBC,cAAQ;;MAAzBP;MAAMQ;;;MAGPC,mBAAmB,GAAGH,YAAY,IAAID,OAA5C;EAEAK,eAAS,CAAC;;QAEFV,IAAJ,EAAU;MACND,UAAU,CAACC,IAAD,EAAOC,QAAP,CAAV,CADM;KAAV,MAGO,IAAII,OAAO,IAAII,mBAAX,IAAkCR,QAAtC,EAAgD;;UAE7CU,OAAO,GAAGC,eAAe,CAACP,OAAD,EAAU;QACrCQ,uBAAuB,EAAE,IADY;;;QAIrCP,YAAY,EAAEG;OAJa,CAA/B;MAMAD,OAAO,CAACG,OAAD,CAAP,CARmD;;MAUnDZ,UAAU,CAACY,OAAD,EAAUV,QAAV,CAAV;;;;WAIG;UACCD,IAAJ,EAAU;QACNA,IAAI,CAACG,UAAL;;KAFR;GAnBK,EAwBN,CAACE,OAAD,EAAUJ,QAAV,EAAoBD,IAApB,EAA0BS,mBAA1B,CAxBM,CAAT;;;;;"}