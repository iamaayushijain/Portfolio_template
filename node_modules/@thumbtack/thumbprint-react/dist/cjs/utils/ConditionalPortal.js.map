{"version":3,"file":"ConditionalPortal.js","sources":["../../../utils/ConditionalPortal.tsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport canUseDOM from './can-use-dom';\n\ninterface PropTypes {\n    /**\n     * Whether or not the contents should be displaced to the end of the `<body>`, or rendered inline.\n     */\n    shouldDisplace?: boolean;\n    /**\n     * The contents to render.\n     */\n    children?: React.ReactNode;\n}\n\n/**\n * Component to conditionally portal a component to the end of the `<body>` if a certain condition is\n * true. Also automatically guards against trying to use portals in SSR where `document` is not\n * defined.\n */\nexport default function ConditionalPortal({\n    shouldDisplace = false,\n    children,\n}: PropTypes): JSX.Element | null {\n    if (!children) {\n        return null;\n    }\n\n    return (\n        // eslint-disable-next-line react/jsx-no-useless-fragment\n        <React.Fragment>\n            {canUseDOM && shouldDisplace\n                ? ReactDOM.createPortal(children, document.body)\n                : children}\n        </React.Fragment>\n    );\n}\n"],"names":["ConditionalPortal","shouldDisplace","children","React","canUseDOM","ReactDOM","createPortal","document","body"],"mappings":";;;;;;;;;AAeA;;;;;;AAKA,SAAwBA;iCACpBC;MAAAA,kDAAiB;MACjBC,gBAAAA;;MAEI,CAACA,QAAL,EAAe;WACJ,IAAP;;;;iCAKCC,cAAD,CAAO,QAAP,QACKC,iBAAS,IAAIH,cAAb,GACKI,QAAQ,CAACC,YAAT,CAAsBJ,QAAtB,EAAgCK,QAAQ,CAACC,IAAzC,CADL,GAEKN,QAHV;;;;;;"}