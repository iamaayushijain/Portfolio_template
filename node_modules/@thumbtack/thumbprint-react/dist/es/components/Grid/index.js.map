{"version":3,"file":"index.js","sources":["../../../../components/Grid/index.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport warning from 'warning';\n\nimport styles from './index.module.scss';\n\nconst { Provider, Consumer } = React.createContext({\n    gutter: 'normal',\n    isWithinGrid: false,\n});\n\nexport interface GridColumnProps {\n    /**\n     * Column contents.\n     */\n    children?: React.ReactNode;\n    /**\n     * Default width of the column as a fraction of the grid out of 12, to be shown at all\n     * breakpoints except those covered by the three optional props below.\n     */\n    base?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * Width of the column as a fraction of the grid out of 12, to be shown in viewports wider\n     * than `small`.\n     */\n    aboveSmall?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * Width of the column as a fraction of the grid out of 12, to be shown in viewports wider\n     * than `medium`.\n     */\n    aboveMedium?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * Width of the column as a fraction of the grid out of 12, to be shown in viewports wider\n     * than `large`.\n     */\n    aboveLarge?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport function GridColumn({\n    children,\n    base = 12,\n    aboveSmall,\n    aboveMedium,\n    aboveLarge,\n    dataTestId,\n    dataTest,\n}: GridColumnProps): JSX.Element {\n    return (\n        <Consumer>\n            {({ gutter, isWithinGrid }): JSX.Element => {\n                warning(isWithinGrid, '`GridColumn` must be an immediate child of a `Grid`');\n\n                return (\n                    <div\n                        className={classNames({\n                            [styles.col]: true,\n                            [styles.colWide]: gutter === 'wide',\n                            [styles.colFlush]: gutter === 'flush',\n                            [styles[`col${base}`]]: true,\n                            [styles[`aboveSmallCol${aboveSmall}`]]: aboveSmall,\n                            [styles[`aboveMediumCol${aboveMedium}`]]: aboveMedium,\n                            [styles[`aboveLargeCol${aboveLarge}`]]: aboveLarge,\n                        })}\n                        data-testid={dataTestId}\n                        data-test={dataTest}\n                    >\n                        {children}\n                    </div>\n                );\n            }}\n        </Consumer>\n    );\n}\n\nexport interface GridProps {\n    /**\n     * Grid contents.\n     */\n    children?: React.ReactNode;\n    /**\n     * Controls the amount of space between columns in the grid.\n     */\n    gutter?: 'normal' | 'wide' | 'flush';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport function Grid({\n    children,\n    gutter = 'normal',\n    dataTestId,\n    dataTest,\n}: GridProps): JSX.Element {\n    return (\n        <div\n            className={classNames({\n                [styles.grid]: true,\n                [styles.gridWide]: gutter === 'wide',\n                [styles.gridFlush]: gutter === 'flush',\n            })}\n            data-testid={dataTestId}\n            data-test={dataTest}\n        >\n            <Provider value={{ gutter, isWithinGrid: true }}>{children}</Provider>\n        </div>\n    );\n}\n"],"names":["React","createContext","gutter","isWithinGrid","Provider","Consumer","GridColumn","children","base","aboveSmall","aboveMedium","aboveLarge","dataTestId","dataTest","warning","classNames","styles","col","colWide","colFlush","Grid","grid","gridWide","gridFlush"],"mappings":";;;;;;2BAM+BA,KAAK,CAACC,aAAN,CAAoB;EAC/CC,MAAM,EAAE,QADuC;EAE/CC,YAAY,EAAE;CAFa;IAAvBC,gCAAAA;IAAUC,gCAAAA;;AAyClB,SAAgBC;MACZC,gBAAAA;uBACAC;MAAAA,8BAAO;MACPC,kBAAAA;MACAC,mBAAAA;MACAC,kBAAAA;MACAC,kBAAAA;MACAC,gBAAAA;SAGI,oBAAC,QAAD,QACK;;;QAAGX,eAAAA;QAAQC,qBAAAA;IACRW,OAAO,CAACX,YAAD,EAAe,qDAAf,CAAP;WAGI;MACI,SAAS,EAAEY,UAAU,iDAChBC,MAAM,CAACC,GADS,EACH,IADG,gCAEhBD,MAAM,CAACE,OAFS,EAEChB,MAAM,KAAK,MAFZ,gCAGhBc,MAAM,CAACG,QAHS,EAGEjB,MAAM,KAAK,OAHb,gCAIhBc,MAAM,cAAOR,IAAP,EAJU,EAIO,IAJP,gCAKhBQ,MAAM,wBAAiBP,UAAjB,EALU,EAKuBA,UALvB,gCAMhBO,MAAM,yBAAkBN,WAAlB,EANU,EAMyBA,WANzB,gCAOhBM,MAAM,wBAAiBL,UAAjB,EAPU,EAOuBA,UAPvB,gBADzB;qBAUiBC,UAVjB;mBAWeC;OAEVN,QAbL,CADJ;GAJR,CADJ;;AA+CJ,SAAgBa;;;MACZb,iBAAAA;2BACAL;MAAAA,mCAAS;MACTU,mBAAAA;MACAC,iBAAAA;SAGI;IACI,SAAS,EAAEE,UAAU,mDAChBC,MAAM,CAACK,IADS,EACF,IADE,iCAEhBL,MAAM,CAACM,QAFS,EAEEpB,MAAM,KAAK,MAFb,iCAGhBc,MAAM,CAACO,SAHS,EAGGrB,MAAM,KAAK,OAHd,iBADzB;mBAMiBU,UANjB;iBAOeC;KAEX,oBAAC,QAAD;IAAU,KAAK,EAAE;MAAEX,MAAM,EAANA,MAAF;MAAUC,YAAY,EAAE;;KAASI,QAAlD,CATJ,CADJ;;;;;"}