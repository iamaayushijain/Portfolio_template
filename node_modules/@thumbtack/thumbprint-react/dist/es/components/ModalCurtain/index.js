import { slicedToArray as _slicedToArray, defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { useState, useEffect } from 'react';
import classNames from 'classnames';
import NoScroll from './components/no-scroll.js';
import useCloseOnEscape from '../../utils/use-close-on-escape.js';
import useFocusTrap from '../../utils/use-focus-trap.js';
import ConditionalPortal from '../../utils/ConditionalPortal.js';
import styles from './index.module.scss';

function ModalCurtain(_ref) {
  var _classNames;

  var _ref$stage = _ref.stage,
      stage = _ref$stage === void 0 ? 'exited' : _ref$stage,
      _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscape,
      shouldCloseOnEscape = _ref$shouldCloseOnEsc === void 0 ? true : _ref$shouldCloseOnEsc,
      _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === void 0 ? 'Modal' : _ref$accessibilityLab,
      initialFocusProp = _ref.initialFocus,
      onCloseClick = _ref.onCloseClick,
      children = _ref.children;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isClient = _useState2[0],
      setIsClient = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      wrapperEl = _useState4[0],
      setWrapperEl = _useState4[1];

  useEffect(function () {
    setIsClient(true);
  }, []);
  var initialFocus = initialFocusProp || wrapperEl;
  var isEnteringOrEntered = stage === 'entering' || stage === 'entered';
  var shouldBindEscListener = isClient && shouldCloseOnEscape && isEnteringOrEntered;
  var shouldTrapFocus = isClient && !!initialFocus && stage === 'entered';
  var shouldDisableScrolling = isEnteringOrEntered;
  useCloseOnEscape(onCloseClick, shouldBindEscListener);
  useFocusTrap(wrapperEl, shouldTrapFocus, initialFocus);
  return React.createElement(ConditionalPortal, {
    shouldDisplace: true
  }, React.createElement("div", {
    role: "dialog",
    "aria-label": accessibilityLabel,
    tabIndex: -1,
    ref: function ref(element) {
      setWrapperEl(element);
    }
  }, shouldDisableScrolling && React.createElement(NoScroll, null), children && children({
    curtainOnClick: function curtainOnClick(event) {
      // Ensures that the click event happened on the element that has the
      // `onClick`. This prevents clicks deep within `children` from bubbling
      // up and closing the ModalCurtain.
      if (event.target === event.currentTarget) {
        onCloseClick();
      }
    },
    curtainClassName: classNames((_classNames = {}, _defineProperty(_classNames, styles.root, true), _defineProperty(_classNames, styles.rootOpen, isEnteringOrEntered), _classNames))
  })));
}

export default ModalCurtain;
//# sourceMappingURL=index.js.map
