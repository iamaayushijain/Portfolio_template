import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import classNames from 'classnames';
import noop from 'lodash/noop';
import clamp from 'lodash/clamp';
import times from 'lodash/times';
import styles from './index.module.scss';

var MAX_NUM_STARS = 5; // Smallest increment we render

var PRECISION = 0.5;
function StarRating(_ref) {
  var _classNames;

  var rating = _ref.rating,
      _ref$hoverRating = _ref.hoverRating,
      hoverRating = _ref$hoverRating === void 0 ? 0 : _ref$hoverRating,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'small' : _ref$size,
      _ref$onStarClick = _ref.onStarClick,
      onStarClick = _ref$onStarClick === void 0 ? noop : _ref$onStarClick,
      _ref$onStarHover = _ref.onStarHover,
      onStarHover = _ref$onStarHover === void 0 ? noop : _ref$onStarHover,
      _ref$onMouseLeave = _ref.onMouseLeave,
      onMouseLeave = _ref$onMouseLeave === void 0 ? noop : _ref$onMouseLeave;
  // Determine if instance is interactive.
  var isInteractive = onStarClick !== noop || onStarHover !== noop; // Limit rating to between 0 and MAX_NUM_STARS

  var clampedRating = clamp(rating, 0, MAX_NUM_STARS); // Round rating to PRECISION (e.g, 2.7 --> 2.5).

  var roundedRating = Math.round(clampedRating / PRECISION) * PRECISION; // Use hoverRating when present, otherwise use rating

  var ratingValue = hoverRating || roundedRating; // aria-label text

  var ariaStarText = ratingValue === 1 ? 'star' : 'stars';
  var ariaLabel = "".concat(ratingValue, " ").concat(ariaStarText, " out of ").concat(MAX_NUM_STARS, " star rating");
  return React.createElement("div", {
    className: classNames(styles.root, (_classNames = {}, _defineProperty(_classNames, styles.small, size === 'small'), _defineProperty(_classNames, styles.large, size === 'large'), _defineProperty(_classNames, styles.medium, size === 'medium'), _classNames)),
    "data-star": ratingValue,
    "aria-label": ariaLabel,
    onMouseLeave: onMouseLeave,
    role: isInteractive ? undefined : 'img'
  }, isInteractive && React.createElement("div", {
    className: styles.rateInputsWrap
  }, times(MAX_NUM_STARS, function (index) {
    return (// eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control
      React.createElement("label", {
        className: styles.rateLabel,
        key: index,
        onMouseEnter: function onMouseEnter() {
          return onStarHover(index + 1);
        }
      }, React.createElement("input", {
        className: styles.rateInput,
        type: "radio",
        name: "rating",
        value: index + 1,
        onClick: function onClick() {
          return onStarClick(index + 1);
        }
      }), index === 0 ? '1 star' : "".concat(index + 1, " stars"))
    );
  })));
}

export default StarRating;
//# sourceMappingURL=index.js.map
