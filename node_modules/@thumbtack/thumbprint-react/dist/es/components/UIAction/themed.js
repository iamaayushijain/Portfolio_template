import { defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import classNames from 'classnames';
import warning from 'warning';
import LoaderDots from '../LoaderDots/index.js';
import { InputRowContext } from '../InputRow/index.js';
import getAnchorProps from './get-anchor-props.js';
import getButtonProps from './get-button-props.js';
import styles from './themed.module.scss';

// eslint-disable-next-line no-shadow

var loaderDotsTheme;

(function (loaderDotsTheme) {
  loaderDotsTheme["primary"] = "inverse";
  loaderDotsTheme["secondary"] = "brand";
  loaderDotsTheme["tertiary"] = "muted";
})(loaderDotsTheme || (loaderDotsTheme = {}));

var withIcon = function withIcon(children, _ref) {
  var _classNames, _classNames2;

  var icon = _ref.icon,
      iconRight = _ref.iconRight;

  if (!icon && !iconRight) {
    return children;
  }

  return React.createElement("span", {
    className: styles.flexCenter
  }, React.createElement("span", {
    className: classNames((_classNames = {}, _defineProperty(_classNames, styles.iconContainer, true), _defineProperty(_classNames, styles.iconContainerHasRightChildren, children), _classNames))
  }, icon), children, React.createElement("span", {
    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.iconContainer, true), _defineProperty(_classNames2, styles.iconContainerHasLeftChildren, children), _classNames2))
  }, iconRight));
};

var withLoader = function withLoader(children, _ref2) {
  var isLoading = _ref2.isLoading,
      _ref2$theme = _ref2.theme,
      theme = _ref2$theme === void 0 ? 'primary' : _ref2$theme;

  if (!isLoading) {
    return children;
  }

  return React.createElement("span", {
    className: styles.loaderContainer
  }, React.createElement("span", {
    className: styles.absoluteCenter
  }, React.createElement(LoaderDots, {
    theme: loaderDotsTheme[theme],
    size: "small"
  })), React.createElement("span", {
    className: styles.hidden
  }, children));
};

var withFlexWrapper = function withFlexWrapper(children, _ref3) {
  var _classNames3;

  var size = _ref3.size;
  return React.createElement("span", {
    className: classNames((_classNames3 = {}, _defineProperty(_classNames3, styles.flexWrapper, true), _defineProperty(_classNames3, styles.flexWrapperSizeSmall, size === 'small'), _defineProperty(_classNames3, styles.flexWrapperSizeLarge, size === 'large'), _classNames3))
  }, children);
};

var Themed = React.forwardRef(function (_ref4, ref) {
  var children = _ref4.children,
      _ref4$isDisabled = _ref4.isDisabled,
      isDisabled = _ref4$isDisabled === void 0 ? false : _ref4$isDisabled,
      _ref4$isLoading = _ref4.isLoading,
      isLoading = _ref4$isLoading === void 0 ? false : _ref4$isLoading,
      icon = _ref4.icon,
      iconRight = _ref4.iconRight,
      _ref4$type = _ref4.type,
      type = _ref4$type === void 0 ? 'button' : _ref4$type,
      to = _ref4.to,
      _ref4$shouldOpenInNew = _ref4.shouldOpenInNewTab,
      shouldOpenInNewTab = _ref4$shouldOpenInNew === void 0 ? false : _ref4$shouldOpenInNew,
      rel = _ref4.rel,
      target = _ref4.target,
      onClick = _ref4.onClick,
      onMouseEnter = _ref4.onMouseEnter,
      onMouseOver = _ref4.onMouseOver,
      onFocus = _ref4.onFocus,
      onMouseLeave = _ref4.onMouseLeave,
      onBlur = _ref4.onBlur,
      accessibilityLabel = _ref4.accessibilityLabel,
      _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? 'large' : _ref4$size,
      _ref4$theme = _ref4.theme,
      theme = _ref4$theme === void 0 ? 'primary' : _ref4$theme,
      _ref4$width = _ref4.width,
      width = _ref4$width === void 0 ? 'auto' : _ref4$width,
      dataTestId = _ref4.dataTestId,
      dataTest = _ref4.dataTest,
      title = _ref4.title;
  warning(children || accessibilityLabel || (icon || iconRight) && children, 'The prop `accessibilityLabel` must be provided to the button or link when `icon` or `iconRight` is provided but `children` is not. This helps users on screen readers navigate our content.');
  return React.createElement(InputRowContext.Consumer, null, function (_ref5) {
    var _classNames4;

    var isWithinInputRow = _ref5.isWithinInputRow,
        isFirstInputRowChild = _ref5.isFirstInputRowChild,
        isLastInputRowChild = _ref5.isLastInputRowChild;
    var isAnchor = !!to;
    var anchorProps = getAnchorProps({
      isDisabled: isDisabled,
      shouldOpenInNewTab: shouldOpenInNewTab,
      to: to,
      onClick: onClick,
      onMouseEnter: onMouseEnter,
      onMouseOver: onMouseOver,
      onFocus: onFocus,
      onMouseLeave: onMouseLeave,
      onBlur: onBlur,
      rel: rel,
      target: target,
      title: title
    });
    var buttonProps = getButtonProps({
      onClick: onClick,
      type: type,
      onMouseEnter: onMouseEnter,
      onMouseOver: onMouseOver,
      onFocus: onFocus,
      onMouseLeave: onMouseLeave,
      onBlur: onBlur
    });
    var className = classNames((_classNames4 = {}, _defineProperty(_classNames4, styles.themedButton, true), _defineProperty(_classNames4, styles.themedButtonRoundedBordersLeft, isFirstInputRowChild || !isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonRoundedBordersRight, isLastInputRowChild || !isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonHasNoRightBorder, isWithinInputRow && !isLastInputRowChild), _defineProperty(_classNames4, styles.themedButtonThemePrimary, theme === 'primary'), _defineProperty(_classNames4, styles.themedButtonThemeTertiary, theme === 'tertiary'), _defineProperty(_classNames4, styles.themedButtonThemeSecondary, theme === 'secondary'), _defineProperty(_classNames4, styles.themedButtonThemeCaution, theme === 'caution'), _defineProperty(_classNames4, styles.themedButtonThemeSolid, theme === 'solid'), _defineProperty(_classNames4, styles.themedButtonThemePopoverPrimary, theme === 'popover-primary'), _defineProperty(_classNames4, styles.themedButtonThemePopoverSecondary, theme === 'popover-secondary'), _defineProperty(_classNames4, styles.themedButtonWidthAuto, width === 'auto' && !isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonWidthFull, width === 'full' || isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonWidthFullBelowSmall, width === 'full-below-small' && !isWithinInputRow), _classNames4));
    var commonProps = {
      disabled: isLoading || isDisabled,
      className: className,
      'aria-label': accessibilityLabel,
      'data-testid': dataTestId,
      'data-test': dataTest
    }; // There are more themes here than are valid for use with `LoaderDots`, so restrict the type
    // by overwriting any invalid themes as `undefined`.

    var restrictedTheme = theme === 'primary' || theme === 'secondary' || theme === 'tertiary' ? theme : undefined;
    var newChildren = withFlexWrapper(withLoader(withIcon(children, {
      icon: icon,
      iconRight: iconRight
    }), {
      isLoading: isLoading,
      theme: restrictedTheme
    }), {
      size: size
    });

    if (isAnchor) {
      return React.createElement("a", _extends({}, commonProps, anchorProps, {
        ref: ref
      }), newChildren);
    }

    return (// Disable this rule, even though `buttonProps.type` can never be undefined,
      // because the rule itself is broken and shows a false positive.
      // https://github.com/yannickcr/eslint-plugin-react/issues/1555
      // eslint-disable-next-line react/button-has-type
      React.createElement("button", _extends({}, commonProps, buttonProps, {
        ref: ref
      }), newChildren)
    );
  });
});

export default Themed;
//# sourceMappingURL=themed.js.map
