{"version":3,"file":"themed.js","sources":["../../../../components/UIAction/themed.tsx"],"sourcesContent":["import React from 'react';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport LoaderDots from '../LoaderDots/index';\nimport { InputRowContext } from '../InputRow/index';\nimport getAnchorProps from './get-anchor-props';\nimport getButtonProps from './get-button-props';\nimport styles from './themed.module.scss';\n\n// False positive\n// eslint-disable-next-line no-shadow\nenum loaderDotsTheme {\n    primary = 'inverse',\n    secondary = 'brand',\n    tertiary = 'muted',\n}\n\nconst withIcon = (\n    children: React.ReactNode,\n    { icon, iconRight }: { icon?: React.ReactNode; iconRight?: React.ReactNode },\n): React.ReactNode => {\n    if (!icon && !iconRight) {\n        return children;\n    }\n\n    return (\n        <span className={styles.flexCenter}>\n            <span\n                className={classNames({\n                    [styles.iconContainer]: true,\n                    [styles.iconContainerHasRightChildren]: children,\n                })}\n            >\n                {icon}\n            </span>\n            {children}\n            <span\n                className={classNames({\n                    [styles.iconContainer]: true,\n                    [styles.iconContainerHasLeftChildren]: children,\n                })}\n            >\n                {iconRight}\n            </span>\n        </span>\n    );\n};\n\nconst withLoader = (\n    children: React.ReactNode,\n    {\n        isLoading,\n        theme = 'primary',\n    }: { isLoading?: boolean; theme?: 'primary' | 'secondary' | 'tertiary' },\n): React.ReactNode => {\n    if (!isLoading) {\n        return children;\n    }\n\n    return (\n        <span className={styles.loaderContainer}>\n            <span className={styles.absoluteCenter}>\n                <LoaderDots theme={loaderDotsTheme[theme]} size=\"small\" />\n            </span>\n            <span className={styles.hidden}>{children}</span>\n        </span>\n    );\n};\n\nconst withFlexWrapper = (\n    children: React.ReactNode,\n    { size }: { size?: 'small' | 'large' },\n): React.ReactNode => (\n    <span\n        className={classNames({\n            [styles.flexWrapper]: true,\n            [styles.flexWrapperSizeSmall]: size === 'small',\n            [styles.flexWrapperSizeLarge]: size === 'large',\n        })}\n    >\n        {children}\n    </span>\n);\n\nconst Themed = React.forwardRef<HTMLButtonElement | HTMLAnchorElement, ThemedPropTypes>(\n    (\n        {\n            children,\n            isDisabled = false,\n            isLoading = false,\n            icon,\n            iconRight,\n            type = 'button',\n            to,\n            shouldOpenInNewTab = false,\n            rel,\n            target,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            accessibilityLabel,\n            size = 'large',\n            theme = 'primary',\n            width = 'auto',\n            dataTestId,\n            dataTest,\n            title,\n        }: ThemedPropTypes,\n        ref,\n    ): JSX.Element => {\n        warning(\n            children || accessibilityLabel || ((icon || iconRight) && children),\n            'The prop `accessibilityLabel` must be provided to the button or link when `icon` or `iconRight` is provided but `children` is not. This helps users on screen readers navigate our content.',\n        );\n\n        return (\n            <InputRowContext.Consumer>\n                {({ isWithinInputRow, isFirstInputRowChild, isLastInputRowChild }): JSX.Element => {\n                    const isAnchor = !!to;\n                    const anchorProps = getAnchorProps({\n                        isDisabled,\n                        shouldOpenInNewTab,\n                        to,\n                        onClick,\n                        onMouseEnter,\n                        onMouseOver,\n                        onFocus,\n                        onMouseLeave,\n                        onBlur,\n                        rel,\n                        target,\n                        title,\n                    });\n                    const buttonProps = getButtonProps({\n                        onClick,\n                        type,\n                        onMouseEnter,\n                        onMouseOver,\n                        onFocus,\n                        onMouseLeave,\n                        onBlur,\n                    });\n\n                    const className = classNames({\n                        [styles.themedButton]: true,\n                        [styles.themedButtonRoundedBordersLeft]:\n                            isFirstInputRowChild || !isWithinInputRow,\n                        [styles.themedButtonRoundedBordersRight]:\n                            isLastInputRowChild || !isWithinInputRow,\n                        [styles.themedButtonHasNoRightBorder]:\n                            isWithinInputRow && !isLastInputRowChild,\n                        [styles.themedButtonThemePrimary]: theme === 'primary',\n                        [styles.themedButtonThemeTertiary]: theme === 'tertiary',\n                        [styles.themedButtonThemeSecondary]: theme === 'secondary',\n                        [styles.themedButtonThemeCaution]: theme === 'caution',\n                        [styles.themedButtonThemeSolid]: theme === 'solid',\n                        [styles.themedButtonThemePopoverPrimary]: theme === 'popover-primary',\n                        [styles.themedButtonThemePopoverSecondary]: theme === 'popover-secondary',\n                        [styles.themedButtonWidthAuto]: width === 'auto' && !isWithinInputRow,\n                        [styles.themedButtonWidthFull]: width === 'full' || isWithinInputRow,\n                        [styles.themedButtonWidthFullBelowSmall]:\n                            width === 'full-below-small' && !isWithinInputRow,\n                    });\n\n                    const commonProps = {\n                        disabled: isLoading || isDisabled,\n                        className,\n                        'aria-label': accessibilityLabel,\n                        'data-testid': dataTestId,\n                        'data-test': dataTest,\n                    };\n\n                    // There are more themes here than are valid for use with `LoaderDots`, so restrict the type\n                    // by overwriting any invalid themes as `undefined`.\n                    const restrictedTheme =\n                        theme === 'primary' || theme === 'secondary' || theme === 'tertiary'\n                            ? theme\n                            : undefined;\n\n                    const newChildren = withFlexWrapper(\n                        withLoader(withIcon(children, { icon, iconRight }), {\n                            isLoading,\n                            theme: restrictedTheme,\n                        }),\n                        { size },\n                    );\n\n                    if (isAnchor) {\n                        return (\n                            <a\n                                {...commonProps}\n                                {...anchorProps}\n                                ref={ref as React.Ref<HTMLAnchorElement>}\n                            >\n                                {newChildren}\n                            </a>\n                        );\n                    }\n\n                    return (\n                        // Disable this rule, even though `buttonProps.type` can never be undefined,\n                        // because the rule itself is broken and shows a false positive.\n                        // https://github.com/yannickcr/eslint-plugin-react/issues/1555\n                        // eslint-disable-next-line react/button-has-type\n                        <button\n                            {...commonProps}\n                            {...buttonProps}\n                            ref={ref as React.Ref<HTMLButtonElement>}\n                        >\n                            {newChildren}\n                        </button>\n                    );\n                }}\n            </InputRowContext.Consumer>\n        );\n    },\n);\n\ninterface ThemedPropTypes {\n    /**\n     * Contents displayed within the button.\n     */\n    children?: React.ReactNode;\n    /**\n     * Boolean determining whether the button is disabled. When `true` it will appear visually\n     * \"greyed out\" and not respond to interaction.\n     */\n    isDisabled?: boolean;\n    /**\n     * Boolean determining whether the button is in a loading state. When `true` the text will\n     * we replaced with a loading animation and interaction will be disabled.\n     */\n    isLoading?: boolean;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left within the button.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right within the button.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Button's on type `submit` will submit a form when used within a `form`\n     * element.\n     */\n    type?: 'button' | 'submit';\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * @deprecated\n     * Opens the URL in a new tab when clicked.\n     * This is deprecated. Use `target=\"_blank\"` instead.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * The anchor `rel` attribute. Setting this value will add to any default values provided by\n     * Thumbprint for the `rel` attribute.\n     */\n    rel?: string;\n    /**\n     * The anchor `target` attribute. Set this to `_blank` to open in a new tab, or to an arbitrary\n     * string to open the link in an `<iframe>` with the same `name`.\n     */\n    target?: string;\n    /**\n     * Function that will run when the button is clicked on.\n     */\n    onClick?: (event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button.\n     */\n    onMouseEnter?: (\n        event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>,\n    ) => void;\n    /**\n     * Function that runs when the user hovers on the button. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: (\n        event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>,\n    ) => void;\n    /**\n     * Function that runs when the user hovers away from the button.\n     */\n    onMouseLeave?: (\n        event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>,\n    ) => void;\n    /**\n     * Function that runs when the button receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLButtonElement | HTMLAnchorElement>) => void;\n    /**\n     * Function that runs when the button loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLButtonElement | HTMLAnchorElement>) => void;\n    /**\n     * Description of the button’s content. It is required if the button has an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Controls the button's background, text, and border color.\n     */\n    theme?:\n        | 'primary'\n        | 'secondary'\n        | 'tertiary'\n        | 'caution'\n        | 'solid'\n        | 'popover-primary'\n        | 'popover-secondary';\n    /**\n     * Changes the button's `line-height`, `padding`, `border-radius`, and `font-size`.\n     */\n    size?: 'small' | 'large';\n    /**\n     * `Button` components are as wide as the content that is passed in. The `full` option will\n     * expand the width to `100%` on all screens. `full-below-small` will expand the width to 100%\n     * on devices smaller than [our `small` breakpoint](/tokens/#section-breakpoint).\n     */\n    width?: 'auto' | 'full' | 'full-below-small';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Adds the `title` attribute to the element. This should be used infrequently since it's better\n     * to use descriptive text in `children`.\n     */\n    title?: string;\n}\n\nexport default Themed;\n"],"names":["loaderDotsTheme","withIcon","children","icon","iconRight","styles","flexCenter","classNames","iconContainer","iconContainerHasRightChildren","iconContainerHasLeftChildren","withLoader","isLoading","theme","loaderContainer","absoluteCenter","hidden","withFlexWrapper","size","flexWrapper","flexWrapperSizeSmall","flexWrapperSizeLarge","Themed","React","forwardRef","ref","isDisabled","type","to","shouldOpenInNewTab","rel","target","onClick","onMouseEnter","onMouseOver","onFocus","onMouseLeave","onBlur","accessibilityLabel","width","dataTestId","dataTest","title","warning","isWithinInputRow","isFirstInputRowChild","isLastInputRowChild","isAnchor","anchorProps","getAnchorProps","buttonProps","getButtonProps","className","themedButton","themedButtonRoundedBordersLeft","themedButtonRoundedBordersRight","themedButtonHasNoRightBorder","themedButtonThemePrimary","themedButtonThemeTertiary","themedButtonThemeSecondary","themedButtonThemeCaution","themedButtonThemeSolid","themedButtonThemePopoverPrimary","themedButtonThemePopoverSecondary","themedButtonWidthAuto","themedButtonWidthFull","themedButtonWidthFullBelowSmall","commonProps","disabled","restrictedTheme","undefined","newChildren"],"mappings":";;;;;;;;;;AAUA;;AACA,IAAKA,eAAL;;AAAA,WAAKA;EACDA,0BAAA,YAAA;EACAA,4BAAA,UAAA;EACAA,2BAAA,UAAA;CAHJ,EAAKA,eAAe,KAAfA,eAAe,KAAA,CAApB;;AAMA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CACbC,QADa;;;MAEXC,YAAAA;MAAMC,iBAAAA;;MAEJ,CAACD,IAAD,IAAS,CAACC,SAAd,EAAyB;WACdF,QAAP;;;SAIA;IAAM,SAAS,EAAEG,MAAM,CAACC;KACpB;IACI,SAAS,EAAEC,UAAU,iDAChBF,MAAM,CAACG,aADS,EACO,IADP,gCAEhBH,MAAM,CAACI,6BAFS,EAEuBP,QAFvB;KAKpBC,IANL,CADJ,EASKD,QATL,EAUI;IACI,SAAS,EAAEK,UAAU,mDAChBF,MAAM,CAACG,aADS,EACO,IADP,iCAEhBH,MAAM,CAACK,4BAFS,EAEsBR,QAFtB;KAKpBE,SANL,CAVJ,CADJ;CARJ;;AA+BA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CACfT,QADe;MAGXU,kBAAAA;0BACAC;MAAAA,iCAAQ;;MAGR,CAACD,SAAL,EAAgB;WACLV,QAAP;;;SAIA;IAAM,SAAS,EAAEG,MAAM,CAACS;KACpB;IAAM,SAAS,EAAET,MAAM,CAACU;KACpB,oBAAC,UAAD;IAAY,KAAK,EAAEf,eAAe,CAACa,KAAD,CAAlC;IAA2C,IAAI,EAAC;IADpD,CADJ,EAII;IAAM,SAAS,EAAER,MAAM,CAACW;KAASd,QAAjC,CAJJ,CADJ;CAXJ;;AAqBA,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CACpBf,QADoB;;;MAElBgB,IAFkB,SAElBA,IAFkB;SAIpB;IACI,SAAS,EAAEX,UAAU,mDAChBF,MAAM,CAACc,WADS,EACK,IADL,iCAEhBd,MAAM,CAACe,oBAFS,EAEcF,IAAI,KAAK,OAFvB,iCAGhBb,MAAM,CAACgB,oBAHS,EAGcH,IAAI,KAAK,OAHvB;KAMpBhB,QAPL,CAJoB;CAAxB;;AAeA,IAAMoB,MAAM,GAAGC,KAAK,CAACC,UAAN,CACX,iBA0BIC,GA1BJ;MAEQvB,iBAAAA;+BACAwB;MAAAA,2CAAa;8BACbd;MAAAA,yCAAY;MACZT,aAAAA;MACAC,kBAAAA;yBACAuB;MAAAA,+BAAO;MACPC,WAAAA;oCACAC;MAAAA,wDAAqB;MACrBC,YAAAA;MACAC,eAAAA;MACAC,gBAAAA;MACAC,qBAAAA;MACAC,oBAAAA;MACAC,gBAAAA;MACAC,qBAAAA;MACAC,eAAAA;MACAC,2BAAAA;yBACApB;MAAAA,+BAAO;0BACPL;MAAAA,iCAAQ;0BACR0B;MAAAA,iCAAQ;MACRC,mBAAAA;MACAC,iBAAAA;MACAC,cAAAA;EAIJC,OAAO,CACHzC,QAAQ,IAAIoC,kBAAZ,IAAmC,CAACnC,IAAI,IAAIC,SAAT,KAAuBF,QADvD,EAEH,6LAFG,CAAP;SAMI,oBAAC,eAAD,CAAiB,QAAjB,QACK;;;QAAG0C,yBAAAA;QAAkBC,6BAAAA;QAAsBC,4BAAAA;QAClCC,QAAQ,GAAG,CAAC,CAACnB,EAAnB;QACMoB,WAAW,GAAGC,cAAc,CAAC;MAC/BvB,UAAU,EAAVA,UAD+B;MAE/BG,kBAAkB,EAAlBA,kBAF+B;MAG/BD,EAAE,EAAFA,EAH+B;MAI/BI,OAAO,EAAPA,OAJ+B;MAK/BC,YAAY,EAAZA,YAL+B;MAM/BC,WAAW,EAAXA,WAN+B;MAO/BC,OAAO,EAAPA,OAP+B;MAQ/BC,YAAY,EAAZA,YAR+B;MAS/BC,MAAM,EAANA,MAT+B;MAU/BP,GAAG,EAAHA,GAV+B;MAW/BC,MAAM,EAANA,MAX+B;MAY/BW,KAAK,EAALA;KAZ8B,CAAlC;QAcMQ,WAAW,GAAGC,cAAc,CAAC;MAC/BnB,OAAO,EAAPA,OAD+B;MAE/BL,IAAI,EAAJA,IAF+B;MAG/BM,YAAY,EAAZA,YAH+B;MAI/BC,WAAW,EAAXA,WAJ+B;MAK/BC,OAAO,EAAPA,OAL+B;MAM/BC,YAAY,EAAZA,YAN+B;MAO/BC,MAAM,EAANA;KAP8B,CAAlC;QAUMe,SAAS,GAAG7C,UAAU,mDACvBF,MAAM,CAACgD,YADgB,EACD,IADC,iCAEvBhD,MAAM,CAACiD,8BAFgB,EAGpBT,oBAAoB,IAAI,CAACD,gBAHL,iCAIvBvC,MAAM,CAACkD,+BAJgB,EAKpBT,mBAAmB,IAAI,CAACF,gBALJ,iCAMvBvC,MAAM,CAACmD,4BANgB,EAOpBZ,gBAAgB,IAAI,CAACE,mBAPD,iCAQvBzC,MAAM,CAACoD,wBARgB,EAQW5C,KAAK,KAAK,SARrB,iCASvBR,MAAM,CAACqD,yBATgB,EASY7C,KAAK,KAAK,UATtB,iCAUvBR,MAAM,CAACsD,0BAVgB,EAUa9C,KAAK,KAAK,WAVvB,iCAWvBR,MAAM,CAACuD,wBAXgB,EAWW/C,KAAK,KAAK,SAXrB,iCAYvBR,MAAM,CAACwD,sBAZgB,EAYShD,KAAK,KAAK,OAZnB,iCAavBR,MAAM,CAACyD,+BAbgB,EAakBjD,KAAK,KAAK,iBAb5B,iCAcvBR,MAAM,CAAC0D,iCAdgB,EAcoBlD,KAAK,KAAK,mBAd9B,iCAevBR,MAAM,CAAC2D,qBAfgB,EAeQzB,KAAK,KAAK,MAAV,IAAoB,CAACK,gBAf7B,iCAgBvBvC,MAAM,CAAC4D,qBAhBgB,EAgBQ1B,KAAK,KAAK,MAAV,IAAoBK,gBAhB5B,iCAiBvBvC,MAAM,CAAC6D,+BAjBgB,EAkBpB3B,KAAK,KAAK,kBAAV,IAAgC,CAACK,gBAlBb,iBAA5B;QAqBMuB,WAAW,GAAG;MAChBC,QAAQ,EAAExD,SAAS,IAAIc,UADP;MAEhB0B,SAAS,EAATA,SAFgB;oBAGFd,kBAHE;qBAIDE,UAJC;mBAKHC;KALjB;;;QAUM4B,eAAe,GACjBxD,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,WAAjC,IAAgDA,KAAK,KAAK,UAA1D,GACMA,KADN,GAEMyD,SAHV;QAKMC,WAAW,GAAGtD,eAAe,CAC/BN,UAAU,CAACV,QAAQ,CAACC,QAAD,EAAW;MAAEC,IAAI,EAAJA,IAAF;MAAQC,SAAS,EAATA;KAAnB,CAAT,EAA0C;MAChDQ,SAAS,EAATA,SADgD;MAEhDC,KAAK,EAAEwD;KAFD,CADqB,EAK/B;MAAEnD,IAAI,EAAJA;KAL6B,CAAnC;;QAQI6B,QAAJ,EAAc;aAEN,sCACQoB,WADR,EAEQnB,WAFR;QAGI,GAAG,EAAEvB;UAEJ8C,WALL,CADJ;;;;;;;iDAiBQJ,WADR,EAEQjB,WAFR;QAGI,GAAG,EAAEzB;UAEJ8C,WALL;;GAxFZ,CADJ;CAlCO,CAAf;;;;"}