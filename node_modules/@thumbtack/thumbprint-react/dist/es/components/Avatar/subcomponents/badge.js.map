{"version":3,"file":"badge.js","sources":["../../../../../components/Avatar/subcomponents/badge.tsx"],"sourcesContent":["import React from 'react';\nimport styles from './badge.module.scss';\n\ninterface ConfigItem {\n    top?: number;\n    right?: number;\n    size: number;\n}\n\ntype SizeClassesType = {\n    xsmall: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    small: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    medium: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    large: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    xlarge: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n};\n\n// TODO(giles): remove all \"checked\" configs once we delete the isChecked prop\nconst sizeClasses: SizeClassesType = {\n    xsmall: {\n        userOnline: {\n            top: 0,\n            right: -2,\n            size: 12,\n        },\n        userChecked: {\n            top: -2,\n            right: -4,\n            size: 17,\n        },\n        entityOnline: {\n            size: 12,\n        },\n    },\n    small: {\n        userOnline: {\n            top: 1,\n            right: -2,\n            size: 12,\n        },\n        userChecked: {\n            top: -2,\n            right: -4,\n            size: 17,\n        },\n        entityOnline: {\n            size: 12,\n        },\n    },\n    medium: {\n        userOnline: {\n            top: 2,\n            right: 2,\n            size: 14,\n        },\n        userChecked: {\n            top: -2,\n            right: -2,\n            size: 20,\n        },\n        entityOnline: {\n            size: 14,\n        },\n    },\n    large: {\n        userOnline: {\n            top: 4,\n            right: 5,\n            size: 18,\n        },\n        userChecked: {\n            top: 0,\n            right: 0,\n            size: 24,\n        },\n        entityOnline: {\n            size: 18,\n        },\n    },\n    xlarge: {\n        userOnline: {\n            top: 0,\n            right: 14,\n            size: 24,\n        },\n        userChecked: {\n            top: 0,\n            right: 6,\n            size: 30,\n        },\n        entityOnline: {\n            size: 24,\n        },\n    },\n};\n\ntype BadgeType = 'userOnline' | 'userChecked' | 'entityOnline';\n\ninterface PropTypes {\n    size: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';\n    type: 'user' | 'entity';\n    children?: React.ReactNode;\n}\n\n/**\n * `Badge` appears on the top-right corner of an `Avatar`. It is used to either\n * show a checkmark or an indicator that there are unread notifications.\n */\nexport default function Badge({ size, type, children }: PropTypes): JSX.Element {\n    let badgeType: BadgeType = 'entityOnline';\n\n    if (type === 'user') {\n        if (children) {\n            badgeType = 'userChecked';\n        } else {\n            badgeType = 'userOnline';\n        }\n    }\n\n    const styleConfig: ConfigItem = sizeClasses[size][badgeType];\n\n    return (\n        <div\n            className={styles.badge}\n            style={{\n                // EntityAvatar badges stick out by one third of their diameter.\n                // UserAvatar badges have custom positions in the style object.\n                top: badgeType === 'entityOnline' ? -(styleConfig.size / 3) : styleConfig.top,\n                right: badgeType === 'entityOnline' ? -(styleConfig.size / 3) : styleConfig.right,\n                width: styleConfig.size,\n                height: styleConfig.size,\n            }}\n        >\n            {children}\n        </div>\n    );\n}\n"],"names":["sizeClasses","xsmall","userOnline","top","right","size","userChecked","entityOnline","small","medium","large","xlarge","Badge","type","children","badgeType","styleConfig","styles","badge","width","height"],"mappings":";;;AAsCA,IAAMA,WAAW,GAAoB;EACjCC,MAAM,EAAE;IACJC,UAAU,EAAE;MACRC,GAAG,EAAE,CADG;MAERC,KAAK,EAAE,CAAC,CAFA;MAGRC,IAAI,EAAE;KAJN;IAMJC,WAAW,EAAE;MACTH,GAAG,EAAE,CAAC,CADG;MAETC,KAAK,EAAE,CAAC,CAFC;MAGTC,IAAI,EAAE;KATN;IAWJE,YAAY,EAAE;MACVF,IAAI,EAAE;;GAbmB;EAgBjCG,KAAK,EAAE;IACHN,UAAU,EAAE;MACRC,GAAG,EAAE,CADG;MAERC,KAAK,EAAE,CAAC,CAFA;MAGRC,IAAI,EAAE;KAJP;IAMHC,WAAW,EAAE;MACTH,GAAG,EAAE,CAAC,CADG;MAETC,KAAK,EAAE,CAAC,CAFC;MAGTC,IAAI,EAAE;KATP;IAWHE,YAAY,EAAE;MACVF,IAAI,EAAE;;GA5BmB;EA+BjCI,MAAM,EAAE;IACJP,UAAU,EAAE;MACRC,GAAG,EAAE,CADG;MAERC,KAAK,EAAE,CAFC;MAGRC,IAAI,EAAE;KAJN;IAMJC,WAAW,EAAE;MACTH,GAAG,EAAE,CAAC,CADG;MAETC,KAAK,EAAE,CAAC,CAFC;MAGTC,IAAI,EAAE;KATN;IAWJE,YAAY,EAAE;MACVF,IAAI,EAAE;;GA3CmB;EA8CjCK,KAAK,EAAE;IACHR,UAAU,EAAE;MACRC,GAAG,EAAE,CADG;MAERC,KAAK,EAAE,CAFC;MAGRC,IAAI,EAAE;KAJP;IAMHC,WAAW,EAAE;MACTH,GAAG,EAAE,CADI;MAETC,KAAK,EAAE,CAFE;MAGTC,IAAI,EAAE;KATP;IAWHE,YAAY,EAAE;MACVF,IAAI,EAAE;;GA1DmB;EA6DjCM,MAAM,EAAE;IACJT,UAAU,EAAE;MACRC,GAAG,EAAE,CADG;MAERC,KAAK,EAAE,EAFC;MAGRC,IAAI,EAAE;KAJN;IAMJC,WAAW,EAAE;MACTH,GAAG,EAAE,CADI;MAETC,KAAK,EAAE,CAFE;MAGTC,IAAI,EAAE;KATN;IAWJE,YAAY,EAAE;MACVF,IAAI,EAAE;;;CAzElB;;;;;;AA0FA,SAAwBO;MAAQP,YAAAA;MAAMQ,YAAAA;MAAMC,gBAAAA;MACpCC,SAAS,GAAc,cAA3B;;MAEIF,IAAI,KAAK,MAAb,EAAqB;QACbC,QAAJ,EAAc;MACVC,SAAS,GAAG,aAAZ;KADJ,MAEO;MACHA,SAAS,GAAG,YAAZ;;;;MAIFC,WAAW,GAAehB,WAAW,CAACK,IAAD,CAAX,CAAkBU,SAAlB,CAAhC;SAGI;IACI,SAAS,EAAEE,MAAM,CAACC,KADtB;IAEI,KAAK,EAAE;;;MAGHf,GAAG,EAAEY,SAAS,KAAK,cAAd,GAA+B,EAAEC,WAAW,CAACX,IAAZ,GAAmB,CAArB,CAA/B,GAAyDW,WAAW,CAACb,GAHvE;MAIHC,KAAK,EAAEW,SAAS,KAAK,cAAd,GAA+B,EAAEC,WAAW,CAACX,IAAZ,GAAmB,CAArB,CAA/B,GAAyDW,WAAW,CAACZ,KAJzE;MAKHe,KAAK,EAAEH,WAAW,CAACX,IALhB;MAMHe,MAAM,EAAEJ,WAAW,CAACX;;KAGvBS,QAXL,CADJ;;;;;"}