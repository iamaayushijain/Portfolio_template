{"version":3,"file":"index.js","sources":["../../../../components/Popover/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Manager, Reference, Popper, RefHandler } from 'react-popper';\nimport startsWith from 'lodash/startsWith';\n\nimport * as tokens from '@thumbtack/thumbprint-tokens';\n\nimport ConditionalPortal from '../../utils/ConditionalPortal';\nimport canUseDOM from '../../utils/can-use-dom';\nimport useCloseOnEscape from '../../utils/use-close-on-escape';\nimport useFocusTrap from '../../utils/use-focus-trap';\n\nimport { TextButton } from '../Button/index';\nimport { Themed } from '../UIAction/index';\n\nimport styles from './index.module.scss';\n\nexport interface PopoverProps {\n    /**\n     * Contents for the Popover. Usually a `PopoverTitle`, `PopoverBody`, and `PopoverPrimaryButton`\n     */\n    children: React.ReactNode;\n    /**\n     * A function that renders JSX and receives an object with `ref`.\n     * All of these props must be added to the component within the render prop.\n     */\n    launcher: ({ ref }: { ref: RefHandler }) => React.ReactNode;\n    /**\n     * Position of popover relative to the launcher.\n     */\n    position?:\n        | 'top-start'\n        | 'top'\n        | 'top-end'\n        | 'bottom-start'\n        | 'bottom'\n        | 'bottom-end'\n        | 'left-start'\n        | 'left'\n        | 'left-end'\n        | 'right-start'\n        | 'right'\n        | 'right-end';\n    /**\n     * Whether or not the popover is visible.\n     */\n    isOpen?: boolean;\n    /**\n     * Function called when the close button is clicked. You should cause this to set `isOpen=false`\n     * in your parent component.\n     */\n    onCloseClick: () => void;\n    /**\n     * By default popovers will render right before the `</body>` tag.\n     * Setting the `container` to `inline` causes the tooltip to remain where it was added to the\n     * DOM.\n     * This option is helpful to work around z-index and positioning issues.\n     */\n    container?: 'inline' | 'body';\n    /**\n     * Accessibility title used to describe the content of the popover to screen readers.\n     */\n    accessibilityLabel?: string;\n}\n\nexport default function Popover({\n    children,\n    launcher,\n    onCloseClick,\n    position = 'top',\n    isOpen = false,\n    container = 'body',\n    accessibilityLabel = 'Popover',\n}: PopoverProps): JSX.Element {\n    // Appends the tooltip right before `</body>` when true. Used to prevent z-index and positioning\n    // issues.\n    const shouldDisplace = container === 'body';\n\n    // Using `useState` instead of `useRef `to allow multiple refs. See Image for another example.\n    const [wrapperEl, setWrapperEl] = useState<HTMLDivElement | null>(null);\n\n    const shouldTrapFocus: boolean = canUseDOM && !!wrapperEl;\n    const shouldBindEscListener: boolean = canUseDOM && isOpen;\n\n    useCloseOnEscape(onCloseClick, shouldBindEscListener);\n    useFocusTrap(wrapperEl, shouldTrapFocus, wrapperEl);\n\n    return (\n        <Manager>\n            <Reference>{({ ref }): React.ReactNode => launcher({ ref })}</Reference>\n            <ConditionalPortal shouldDisplace={shouldDisplace}>\n                <Popper\n                    placement={position}\n                    modifiers={{\n                        offset: { offset: `0, ${tokens.tpSpace3}` },\n                        preventOverflow: { boundariesElement: 'window' },\n                    }}\n                    positionFixed={false}\n                >\n                    {({ ref: popperRef, style, placement, arrowProps }): JSX.Element => (\n                        // Use tabIndex={-1} to allow programmatic focus (as initialFocus node\n                        // for focus-trap) but not be tabbable by user.\n                        <div\n                            role=\"dialog\"\n                            aria-label={accessibilityLabel}\n                            tabIndex={-1}\n                            ref={(el: HTMLDivElement | null): void => {\n                                setWrapperEl(el);\n                                popperRef(el);\n                            }}\n                            className={classNames({\n                                [styles.root]: true,\n                                [styles.open]: isOpen,\n                            })}\n                            style={style}\n                            data-placement={placement}\n                        >\n                            {children}\n\n                            <div className={styles.closeButton}>\n                                <TextButton\n                                    accessibilityLabel=\"Close popover\"\n                                    iconLeft={\n                                        <svg\n                                            viewBox=\"0 0 24 24\"\n                                            width=\"14\"\n                                            height=\"14\"\n                                            stroke=\"currentColor\"\n                                            strokeWidth=\"3\"\n                                            fill=\"none\"\n                                            strokeLinecap=\"round\"\n                                            strokeLinejoin=\"round\"\n                                            className={styles.closeButtonIcon}\n                                        >\n                                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                                        </svg>\n                                    }\n                                    theme=\"inherit\"\n                                    onClick={onCloseClick}\n                                />\n                            </div>\n\n                            <div\n                                className={classNames({\n                                    [styles.nubbin]: true,\n                                    [styles.nubbinTop]: startsWith(placement, 'bottom'),\n                                    [styles.nubbinBottom]: startsWith(placement, 'top'),\n                                    [styles.nubbinLeft]: startsWith(placement, 'right'),\n                                    [styles.nubbinRight]: startsWith(placement, 'left'),\n                                })}\n                                ref={arrowProps.ref}\n                                style={arrowProps.style}\n                            />\n                        </div>\n                    )}\n                </Popper>\n            </ConditionalPortal>\n        </Manager>\n    );\n}\n\nexport interface PopoverTitleProps {\n    /**\n     * The contents of the title.\n     */\n    children: React.ReactNode;\n}\n\nconst PopoverTitle = ({ children }: PopoverTitleProps): JSX.Element => (\n    <div className={styles.popoverTitle}>{children}</div>\n);\n\nexport interface PopoverBodyProps {\n    /**\n     * The contents of the body.\n     */\n    children: React.ReactNode;\n}\n\nconst PopoverBody = ({ children }: PopoverBodyProps): JSX.Element => (\n    <div className={styles.popoverBody}>{children}</div>\n);\n\nexport interface PopoverPrimaryButtonProps {\n    /**\n     * The text of the button.\n     */\n    children: string;\n    /**\n     * The function to call when the button is clicked.\n     */\n    onClick: () => void;\n}\n\nconst PopoverPrimaryButton = ({ children, onClick }: PopoverPrimaryButtonProps): JSX.Element => (\n    <Themed size=\"small\" onClick={onClick} theme=\"popover-primary\">\n        {children}\n    </Themed>\n);\n\nexport interface PopoverSecondaryButtonProps {\n    /**\n     * The text of the button.\n     */\n    children: string;\n    /**\n     * The function to call when the button is clicked.\n     */\n    onClick?: () => void;\n    /**\n     * Link to visit when the button is clicked. It will be opened in a new tab.\n     */\n    to?: string;\n}\n\nconst PopoverSecondaryButton = ({\n    children,\n    onClick,\n    to,\n}: PopoverSecondaryButtonProps): JSX.Element => (\n    <Themed size=\"small\" onClick={onClick} to={to} theme=\"popover-secondary\" shouldOpenInNewTab>\n        {children}\n    </Themed>\n);\n\nexport { PopoverTitle, PopoverBody, PopoverPrimaryButton, PopoverSecondaryButton };\n"],"names":["Popover","children","launcher","onCloseClick","position","isOpen","container","accessibilityLabel","shouldDisplace","useState","wrapperEl","setWrapperEl","shouldTrapFocus","canUseDOM","shouldBindEscListener","useCloseOnEscape","useFocusTrap","ref","offset","tokens","preventOverflow","boundariesElement","popperRef","style","placement","arrowProps","el","classNames","styles","root","open","closeButton","closeButtonIcon","nubbin","nubbinTop","startsWith","nubbinBottom","nubbinLeft","nubbinRight","PopoverTitle","popoverTitle","PopoverBody","popoverBody","PopoverPrimaryButton","onClick","PopoverSecondaryButton","to"],"mappings":"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"}