import { defineProperty as _defineProperty, inherits as _inherits, createClass as _createClass, classCallCheck as _classCallCheck, possibleConstructorReturn as _possibleConstructorReturn, getPrototypeOf as _getPrototypeOf, assertThisInitialized as _assertThisInitialized } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import classNames from 'classnames';
import { tpDuration5, tpDuration4 } from '@thumbtack/thumbprint-tokens';
import { TextButton } from '../Button/index.js';
import ReactDOM from 'react-dom';
import noop from 'lodash/noop';
import StickyFooter from './components/sticky-footer.js';
import Transition from './components/transition.js';
import ModalCurtain from '../ModalCurtain/index.js';
import styles from './index.module.scss';

var _React$createContext = React.createContext({
  stickyFooterContainerRef: null,
  setSticky: noop
}),
    Provider = _React$createContext.Provider,
    Consumer = _React$createContext.Consumer; // These values are duplicated in the Sass.


var TRANSITION_OPEN_SPEED = tpDuration5;
var TRANSITION_CLOSE_SPEED = tpDuration4;
/**
 * `ModalAnimatedWrapper` is an exported component that we export for developers that want access to
 * `Modal` without padding and a close button. We export it as a named export instead of
 * creating a `hasNoPadding` prop partly to discourage the use of `Modal` without padding.
 *
 * This component uses `ModalCurtain` and includes the backdrop, transition, and white modal
 * wrapper that is available at a few widths.
 */

var ModalAnimatedWrapper = function ModalAnimatedWrapper(_ref) {
  var children = _ref.children,
      _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      onCloseClick = _ref.onCloseClick,
      onCloseFinish = _ref.onCloseFinish,
      onOpenFinish = _ref.onOpenFinish,
      _ref$shouldCloseOnCur = _ref.shouldCloseOnCurtainClick,
      shouldCloseOnCurtainClick = _ref$shouldCloseOnCur === void 0 ? true : _ref$shouldCloseOnCur,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'medium' : _ref$width,
      _ref$heightAboveSmall = _ref.heightAboveSmall,
      heightAboveSmall = _ref$heightAboveSmall === void 0 ? 'auto' : _ref$heightAboveSmall,
      _ref$shouldPageScroll = _ref.shouldPageScrollAboveSmall,
      shouldPageScrollAboveSmall = _ref$shouldPageScroll === void 0 ? true : _ref$shouldPageScroll;
  return React.createElement(Transition, {
    in: isOpen,
    timeout: {
      enter: TRANSITION_OPEN_SPEED,
      exit: TRANSITION_CLOSE_SPEED
    },
    onEntered: onOpenFinish,
    onExited: onCloseFinish
  }, function (transitionStage) {
    return React.createElement(ModalCurtain, {
      stage: transitionStage,
      onCloseClick: onCloseClick
    }, function (_ref2) {
      var _classNames, _classNames2, _classNames3;

      var curtainClassName = _ref2.curtainClassName,
          curtainOnClick = _ref2.curtainOnClick;
      return (// eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
        React.createElement("div", {
          className: classNames((_classNames = {}, _defineProperty(_classNames, curtainClassName, true), _defineProperty(_classNames, styles.curtain, true), _defineProperty(_classNames, styles.curtainOpen, isOpen), _classNames))
        }, React.createElement("div", {
          className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.curtainInner, true), _defineProperty(_classNames2, styles.curtainInnerShouldPageScrollAboveSmall, shouldPageScrollAboveSmall), _classNames2)),
          onClick: shouldCloseOnCurtainClick ? curtainOnClick : undefined,
          "data-test": "thumbprint-modal-curtain"
        }, React.createElement("div", {
          className: classNames((_classNames3 = {}, _defineProperty(_classNames3, styles.wrapper, true), _defineProperty(_classNames3, styles.wrapperOpen, isOpen), _defineProperty(_classNames3, styles.wrapperWide, width === 'wide'), _defineProperty(_classNames3, styles.wrapperNarrow, width === 'narrow'), _defineProperty(_classNames3, styles.wrapperMedium, width === 'medium'), _defineProperty(_classNames3, styles.wrapperHeightMedium, heightAboveSmall === 'medium'), _defineProperty(_classNames3, styles.wrapperHeightTall, heightAboveSmall === 'tall'), _defineProperty(_classNames3, styles.wrapperShouldPageScrollAboveSmall, shouldPageScrollAboveSmall), _classNames3)),
          "data-test": "thumbprint-modal-wrapper"
        }, React.createElement("div", {
          className: classNames(_defineProperty({}, styles.container, true)),
          "data-test": "thumbprint-modal-container"
        }, children))))
      );
    });
  });
};

var ModalHeader = function ModalHeader(_ref3) {
  var children = _ref3.children;
  return React.createElement("div", {
    className: styles.modalHeader
  }, children);
};

var ModalTitle = function ModalTitle(_ref4) {
  var children = _ref4.children;
  return React.createElement("div", {
    className: styles.modalTitle
  }, children);
};

var ModalDescription = function ModalDescription(_ref5) {
  var children = _ref5.children;
  return React.createElement("div", {
    className: styles.modalDescription
  }, children);
};

var ModalContent = function ModalContent(_ref6) {
  var children = _ref6.children;
  return React.createElement("div", {
    className: styles.modalContent
  }, children);
};

var ModalContentFullBleed = function ModalContentFullBleed(_ref7) {
  var children = _ref7.children,
      _ref7$className = _ref7.className,
      className = _ref7$className === void 0 ? '' : _ref7$className,
      _ref7$style = _ref7.style,
      style = _ref7$style === void 0 ? {} : _ref7$style;
  return React.createElement("div", {
    className: classNames(className, styles.modalContentFullBleed),
    style: style
  }, children);
};

var ModalFooter =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ModalFooter, _React$Component);

  function ModalFooter(props) {
    var _this;

    _classCallCheck(this, ModalFooter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalFooter).call(this, props));
    _this.state = {
      isClient: false
    };
    return _this;
  }

  _createClass(ModalFooter, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        isClient: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var isClient = this.state.isClient;
      var _this$props = this.props,
          isSticky = _this$props.isSticky,
          children = _this$props.children;

      if (!isClient) {
        return null;
      }

      return React.createElement(Consumer, null, function (_ref8) {
        var stickyFooterContainerRef = _ref8.stickyFooterContainerRef,
            setSticky = _ref8.setSticky;

        // When `isSticky` is true, the `ModalFooter` must change its position in the
        // DOM so that it is fixed at the bottom of the modal on small viewports. We
        // use React's Context API so that it is a property of the `ModalFooter`
        // component and not the `Modal` API.
        //
        // `stickyFooterContainerRef` is the DOM element where the sticky footer will
        // render. `setSticky` is a function that updates the state in `Modal`,
        // changing the CSS to make the contents scroll and the footer fixed at the
        // bottom.
        if (!isSticky || stickyFooterContainerRef === null || stickyFooterContainerRef.current === null) {
          return React.createElement("div", {
            className: styles.modalFooterFluid
          }, children);
        } // We have to create a separate component here because `setSticky` updates
        // state in `Modal` and state updates are not allowed within `render`.
        // Moving it to a separate component allows us to call it within
        // `componentDidMount`.
        // https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d#6a05


        return ReactDOM.createPortal(React.createElement(StickyFooter, {
          setSticky: setSticky
        }, children), stickyFooterContainerRef.current);
      });
    }
  }]);

  return ModalFooter;
}(React.Component);

var Modal =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(Modal, _React$Component2);

  function Modal(props) {
    var _this2;

    _classCallCheck(this, Modal);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));
    _this2.state = {
      hasStickyFooter: false,
      stickyFooterContainerRef: React.createRef()
    };
    _this2.setSticky = _this2.setSticky.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  _createClass(Modal, [{
    key: "setSticky",
    value: function setSticky(newVal) {
      var hasStickyFooter = this.state.hasStickyFooter;

      if (newVal !== hasStickyFooter) {
        this.setState({
          hasStickyFooter: newVal
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames6;

      var _this$props2 = this.props,
          children = _this$props2.children,
          _this$props2$isOpen = _this$props2.isOpen,
          isOpen = _this$props2$isOpen === void 0 ? false : _this$props2$isOpen,
          onCloseClick = _this$props2.onCloseClick,
          onCloseFinish = _this$props2.onCloseFinish,
          onOpenFinish = _this$props2.onOpenFinish,
          _this$props2$shouldCl = _this$props2.shouldCloseOnCurtainClick,
          shouldCloseOnCurtainClick = _this$props2$shouldCl === void 0 ? true : _this$props2$shouldCl,
          _this$props2$shouldHi = _this$props2.shouldHideCloseButton,
          shouldHideCloseButton = _this$props2$shouldHi === void 0 ? false : _this$props2$shouldHi,
          _this$props2$width = _this$props2.width,
          width = _this$props2$width === void 0 ? 'medium' : _this$props2$width,
          _this$props2$heightAb = _this$props2.heightAboveSmall,
          heightAboveSmall = _this$props2$heightAb === void 0 ? 'auto' : _this$props2$heightAb;
      var _this$state = this.state,
          hasStickyFooter = _this$state.hasStickyFooter,
          stickyFooterContainerRef = _this$state.stickyFooterContainerRef;
      return React.createElement(ModalAnimatedWrapper, {
        onCloseClick: onCloseClick,
        onOpenFinish: onOpenFinish,
        onCloseFinish: onCloseFinish,
        shouldCloseOnCurtainClick: shouldCloseOnCurtainClick,
        isOpen: isOpen,
        width: width,
        heightAboveSmall: heightAboveSmall // We allow the modal to grow taller than the page only if there is no sticky
        // footer. This means that the page can scroll vertically when the modal contents
        // are tall enough. If we have a sticky footer, we prevent the modal from getting
        // taller than the viewport so that the footer can always appear at the bottom.
        // In this case, the inside of the modal itself will scroll vertically as needed.
        ,
        shouldPageScrollAboveSmall: !hasStickyFooter
      }, React.createElement(Provider, {
        value: {
          stickyFooterContainerRef: stickyFooterContainerRef,
          setSticky: this.setSticky
        }
      }, React.createElement("div", {
        className: styles.contents
      }, React.createElement("div", {
        className: classNames(styles.contentsPadding, _defineProperty({}, styles.contentsPaddingNotSticky, !hasStickyFooter))
      }, children)), React.createElement("div", {
        ref: stickyFooterContainerRef
      }), React.createElement("div", {
        className: classNames((_classNames6 = {}, _defineProperty(_classNames6, styles.closeButton, true), _defineProperty(_classNames6, styles.closeButtonNotSticky, !hasStickyFooter), _classNames6))
      }, shouldHideCloseButton === false && React.createElement(TextButton, {
        accessibilityLabel: "Close modal",
        dataTest: "close-modal",
        iconLeft: React.createElement("svg", {
          viewBox: "0 0 24 24",
          width: "18",
          height: "18",
          stroke: "currentColor",
          strokeWidth: "3",
          fill: "none",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          className: styles.closeButtonIcon
        }, React.createElement("line", {
          x1: "18",
          y1: "6",
          x2: "6",
          y2: "18"
        }), React.createElement("line", {
          x1: "6",
          y1: "6",
          x2: "18",
          y2: "18"
        })),
        onClick: onCloseClick,
        theme: "inherit"
      }))));
    }
  }]);

  return Modal;
}(React.Component);

export default Modal;
export { ModalAnimatedWrapper, ModalContent, ModalContentFullBleed, ModalDescription, ModalFooter, ModalHeader, ModalTitle };
//# sourceMappingURL=index.js.map
