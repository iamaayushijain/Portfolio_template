{"version":3,"file":"index.js","sources":["../../../../../../components/ModalBase/subcomponents/modal-structure/index.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport noScroll from 'no-scroll';\nimport FocusTrap from 'focus-trap-react';\nimport ModalContents from '../modal-contents/index.jsx';\nimport styles from './index.module.scss';\n\nconst ESC_KEY = 27;\n\nconst toggleScrolling = isOpen => {\n    if (isOpen) {\n        noScroll.on();\n    } else {\n        noScroll.off();\n    }\n};\n\nexport default class ModalStructure extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.toggleKeyDownListener = this.toggleKeyDownListener.bind(this);\n        this.state = {\n            keyDownListenerRegistered: false,\n        };\n\n        const { shouldAnimate } = this.props;\n\n        /**\n         * Duration of the modal's transition on open and close. This value is duplicated in the\n         * Sass.\n         */\n        this.TRANSITION_SPEED = shouldAnimate ? 500 : 0;\n    }\n\n    componentDidMount() {\n        const { isOpen, shouldCloseOnEscape } = this.props;\n\n        this.toggleKeyDownListener(isOpen, shouldCloseOnEscape);\n\n        if (isOpen) {\n            // Only disable scrolling on `componentDidMount` if the modal should immediately open\n            // once it is mounted. Turning off the scroll lock if it has never been enabled may\n            // cause the page to jump.\n            toggleScrolling(isOpen);\n        }\n    }\n\n    // eslint-disable-next-line react/sort-comp\n    componentWillUnmount() {\n        this.toggleKeyDownListener(false, false);\n        toggleScrolling(false);\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) {\n        const { isOpen, onOpenFinish, onCloseFinish, shouldCloseOnEscape } = this.props;\n\n        // Enable or disable the background scrolling if the `isOpen` prop has changed.\n        if (isOpen !== nextProps.isOpen) {\n            toggleScrolling(nextProps.isOpen);\n\n            // Set timeouts that match out transition speed. This allows us to fire functions when\n            // our transitions are complete and the modal is entirely opened or closed.\n            if (nextProps.isOpen === true && onOpenFinish) {\n                setTimeout(onOpenFinish, this.TRANSITION_SPEED);\n            } else if (nextProps.isOpen === false && onCloseFinish) {\n                setTimeout(onCloseFinish, this.TRANSITION_SPEED);\n            }\n        }\n\n        // Add or remove the `ESC` key listener when `isOpen` or `shouldCloseOnEscape` changes.\n        if (isOpen !== nextProps.isOpen || shouldCloseOnEscape !== nextProps.shouldCloseOnEscape) {\n            this.toggleKeyDownListener(nextProps.isOpen, nextProps.shouldCloseOnEscape);\n        }\n    }\n\n    handleKeyDown(event) {\n        const { onCloseClick } = this.props;\n\n        if (event.keyCode === ESC_KEY) {\n            event.preventDefault();\n            onCloseClick(event);\n        }\n    }\n\n    /**\n     * Adds or removes an event listener for `keyDown`. This is used to close the modal on `ESC`.\n     * @param {boolean} isOpen\n     * @param {boolean} shouldCloseOnEscape\n     */\n    toggleKeyDownListener(isOpen, shouldCloseOnEscape) {\n        const { keyDownListenerRegistered } = this.state;\n\n        if (isOpen && shouldCloseOnEscape && !keyDownListenerRegistered) {\n            document.addEventListener('keydown', this.handleKeyDown);\n            this.setState({ keyDownListenerRegistered: true });\n        } else if (keyDownListenerRegistered) {\n            document.removeEventListener('keydown', this.handleKeyDown);\n            this.setState({ keyDownListenerRegistered: false });\n        }\n    }\n\n    render() {\n        const {\n            assistiveTitle,\n            backdropPadding,\n            children,\n            contentsMaxWidth,\n            isOpen,\n            onCloseClick,\n            shouldAnimate,\n            shouldCloseOnBackdropClick,\n        } = this.props;\n\n        return (\n            <FocusTrap active={isOpen}>\n                <div\n                    className={classnames(styles.modalStructureBackdrop, {\n                        [styles.modalStructureBackdropOpen]: isOpen,\n                        [styles.modalStructureBackdropAnimated]: shouldAnimate,\n                    })}\n                    style={{ padding: backdropPadding }}\n                >\n                    <ModalContents\n                        contentsMaxWidth={contentsMaxWidth}\n                        onCloseClick={onCloseClick}\n                        disableOnClickOutside={!isOpen || !shouldCloseOnBackdropClick}\n                        isOpen={isOpen}\n                        shouldAnimate={shouldAnimate}\n                        role=\"dialog\"\n                        aria-label={assistiveTitle}\n                    >\n                        {children}\n                    </ModalContents>\n                </div>\n            </FocusTrap>\n        );\n    }\n}\n\nModalStructure.propTypes = {\n    /**\n     * Content that appears on top of the backdrop.\n     */\n    children: PropTypes.node,\n    /**\n     * Should the backdrop appear open.\n     */\n    isOpen: PropTypes.bool,\n    /**\n     * Accessibility title used to describe the content of the modal to screen readers.\n     */\n    assistiveTitle: PropTypes.string,\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: PropTypes.func.isRequired,\n    /**\n     * Function that fires once the modal has opened and transitions have ended.\n     */\n    onOpenFinish: PropTypes.func,\n    /**\n     * Function that fires once the modal has closed and transitions have ended.\n     */\n    onCloseFinish: PropTypes.func,\n    /**\n     * Animate when opening and closing the modal.\n     */\n    shouldAnimate: PropTypes.bool,\n    /**\n     * Determines if the modal should close when clicking on the backdrop, outside of the content.\n     */\n    shouldCloseOnBackdropClick: PropTypes.bool,\n    /**\n     * Determines if the modal should close when pressing the escape key.\n     */\n    shouldCloseOnEscape: PropTypes.bool,\n    /**\n     * Amount of space separating the contents from the backdrop.\n     */\n    backdropPadding: PropTypes.oneOf([0, '48px 20px']),\n    /**\n     * The max width of the container that wraps the contents of the modal.\n     */\n    contentsMaxWidth: PropTypes.string,\n};\n\nModalStructure.defaultProps = {\n    children: undefined,\n    isOpen: false,\n    assistiveTitle: 'Modal',\n    onOpenFinish: undefined,\n    onCloseFinish: undefined,\n    backdropPadding: '48px 20px',\n    contentsMaxWidth: '100%',\n    shouldAnimate: true,\n    shouldCloseOnBackdropClick: true,\n    shouldCloseOnEscape: true,\n};\n"],"names":["ESC_KEY","toggleScrolling","isOpen","noScroll","on","off","ModalStructure","props","handleKeyDown","bind","toggleKeyDownListener","state","keyDownListenerRegistered","shouldAnimate","TRANSITION_SPEED","shouldCloseOnEscape","nextProps","onOpenFinish","onCloseFinish","setTimeout","event","onCloseClick","keyCode","preventDefault","document","addEventListener","setState","removeEventListener","assistiveTitle","backdropPadding","children","contentsMaxWidth","shouldCloseOnBackdropClick","classnames","styles","modalStructureBackdrop","modalStructureBackdropOpen","modalStructureBackdropAnimated","padding","React","Component","propTypes","PropTypes","node","bool","string","func","isRequired","oneOf","defaultProps","undefined"],"mappings":"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"}