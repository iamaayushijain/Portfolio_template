{"version":3,"file":"index.js","sources":["../../../../components/Checkbox/index.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport warning from 'warning';\nimport styles from './index.module.scss';\n\nconst labelCursor = {\n    error: 'pointer',\n    disabled: 'default',\n    default: 'pointer',\n};\n\nconst color = {\n    error: {\n        unchecked: tokens.tpColorRed,\n        checked: tokens.tpColorRed,\n        indeterminate: tokens.tpColorRed,\n    },\n    disabled: {\n        unchecked: tokens.tpColorGray,\n        checked: tokens.tpColorGray,\n        indeterminate: tokens.tpColorGray,\n    },\n    default: {\n        unchecked: 'inherit',\n        checked: tokens.tpColorWhite,\n        indeterminate: tokens.tpColorWhite,\n    },\n};\n\nconst borderColor = {\n    error: {\n        unchecked: tokens.tpColorRed,\n        checked: tokens.tpColorRed,\n        indeterminate: tokens.tpColorRed,\n    },\n    disabled: {\n        unchecked: tokens.tpColorGray300,\n        checked: tokens.tpColorGray300,\n        indeterminate: tokens.tpColorGray300,\n    },\n    default: {\n        unchecked: tokens.tpColorGray,\n        checked: tokens.tpColorBlue,\n        indeterminate: tokens.tpColorBlue,\n    },\n};\n\nconst backgroundColor = {\n    error: {\n        unchecked: tokens.tpColorWhite,\n        checked: tokens.tpColorWhite,\n        indeterminate: tokens.tpColorWhite,\n    },\n    disabled: {\n        unchecked: tokens.tpColorGray200,\n        checked: tokens.tpColorGray200,\n        indeterminate: tokens.tpColorGray200,\n    },\n    default: {\n        unchecked: tokens.tpColorWhite,\n        checked: tokens.tpColorBlue,\n        indeterminate: tokens.tpColorBlue,\n    },\n};\n\nconst textColor = {\n    error: tokens.tpColorRed,\n    disabled: tokens.tpColorGray,\n    default: 'inherit',\n};\n\ntype CheckedState = 'checked' | 'indeterminate' | 'unchecked';\ntype FunctionalState = 'disabled' | 'error' | 'default';\n\nconst getCheckedState = ({\n    isChecked,\n    isIndeterminate,\n}: Pick<CheckboxProps, 'isChecked' | 'isIndeterminate'>): CheckedState => {\n    if (isChecked) {\n        return 'checked';\n    }\n\n    if (isIndeterminate) {\n        return 'indeterminate';\n    }\n\n    return 'unchecked';\n};\n\nconst getFunctionalState = ({\n    isDisabled,\n    hasError,\n}: Pick<CheckboxProps, 'isDisabled' | 'hasError'>): FunctionalState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\nexport interface CheckboxProps {\n    /**\n     * Disables the input and the label.\n     */\n    isDisabled?: boolean;\n    /**\n     * Determines if the checkbox is checked.\n     */\n    isChecked?: boolean;\n    /**\n     * Makes the radio and text color red.\n     */\n    hasError?: boolean;\n    /**\n     * Text or elements that appear within the label. If `children` is not provided, the developer\n     * must use the `Radio`'s `id` prop to associate it with a custom `<label>` element.\n     */\n    children?: React.ReactNode;\n    /**\n     * The `id` is added to the checkbox as an HTML attribute and passed to the `onChange`\n     * function.\n     */\n    id?: string;\n    /**\n     * Adds the `required` HTML attribute.\n     */\n    isRequired?: boolean;\n    /**\n     * Checkboxes on a page with the same name will be grouped together when sent to the server.\n     * The browser will only send the value of checkboxes that are checked.\n     */\n    name?: string;\n    /**\n     * Determine that padding that gets applied to the label. This can be used\n     * to increase the label's click target. The value supplied should be a\n     * string with a unit such as `8px` or `8px 16px`.\n     */\n    labelPadding?: string;\n    /**\n     * Function that runs when a checkbox value changes. It receives the new boolean value,\n     * the provided `id`, and the underlying `event` as such:\n     * `props.onChange(event.target.checked, props.id, event)`.\n     */\n    onChange: (\n        value: boolean,\n        id: string | undefined,\n        event: React.ChangeEvent<HTMLInputElement>,\n    ) => void;\n    /**\n     * Function that is called when the user presses a key while focused on the Checkbox.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * Shows a horizontal line to represent an indeterminate input.\n     */\n    isIndeterminate?: boolean;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Determines how the checkbox input will be vertically aligned relative to `props.children`.\n     */\n    checkboxVerticalAlign?: 'top' | 'center';\n    /**\n     * Determines the value that will be submitted if the checkbox is checked. The default value is\n     * `'on'`.\n     */\n    value?: string | string[] | number;\n}\n\nexport default function Checkbox({\n    checkboxVerticalAlign = 'center',\n    children,\n    dataTest,\n    dataTestId,\n    hasError = false,\n    id,\n    isChecked = false,\n    isDisabled = false,\n    isIndeterminate = false,\n    labelPadding = '14px 0',\n    isRequired = false,\n    name,\n    onChange,\n    onKeyDown = (): void => {},\n    value,\n}: CheckboxProps): JSX.Element {\n    const functionalState = getFunctionalState({ isDisabled, hasError });\n    const checkedState = getCheckedState({ isChecked, isIndeterminate });\n\n    warning(\n        children || id,\n        'If `children` is not provided to `Checkbox`, the `id` prop must be used to link the `Checkbox` to a `label` element.',\n    );\n\n    // React adds a `value` attribute (`value=\"\"`) to `input[type=\"checkbox\"]` even if the `value`\n    // prop is `undefined`. This prevents the default browser behavior of `value=\"on\"` when the\n    // `value` attribute is omitted. We can work around the React behavior and avoid adding\n    // `value=\"\"` to the DOM by conditionally creating an object that we then spread onto the\n    // element. More context: https://github.com/thumbtack/thumbprint/issues/589\n    const valuePropObject = value ? { value } : {};\n\n    return (\n        // eslint-disable-next-line jsx-a11y/label-has-associated-control, jsx-a11y/label-has-for\n        <label\n            className={classNames(styles.root, {\n                [styles.rootCheckboxVerticalAlignTop]: checkboxVerticalAlign === 'top',\n                [styles.rootCheckboxVerticalAlignCenter]: checkboxVerticalAlign === 'center',\n            })}\n            style={{ cursor: labelCursor[functionalState], padding: labelPadding }}\n        >\n            <input\n                className={styles.input}\n                aria-checked={isIndeterminate ? 'mixed' : isChecked}\n                data-testid={dataTestId}\n                data-test={dataTest}\n                type=\"checkbox\"\n                id={id}\n                name={name}\n                checked={isChecked}\n                onChange={(event): void => {\n                    onChange(event.target.checked, id, event);\n                }}\n                onKeyDown={(event): void => {\n                    onKeyDown(event);\n                }}\n                disabled={isDisabled}\n                required={isRequired}\n                {...valuePropObject}\n            />\n\n            <div\n                className={styles.checkboxImage}\n                style={{\n                    color: color[functionalState][checkedState],\n                    backgroundColor: backgroundColor[functionalState][checkedState],\n                    borderColor: borderColor[functionalState][checkedState],\n                }}\n            >\n                {isChecked && !isIndeterminate && (\n                    <svg\n                        width=\"18\"\n                        height=\"18\"\n                        viewBox=\"0 0 18 18\"\n                        fill=\"currentColor\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                        <rect\n                            x=\"15.232\"\n                            y=\"4.003\"\n                            width=\"11.701\"\n                            height=\"1.879\"\n                            rx=\".939\"\n                            transform=\"rotate(123 15.232 4.003)\"\n                        />\n                        <rect\n                            x=\"8.83\"\n                            y=\"13.822\"\n                            width=\"7.337\"\n                            height=\"1.879\"\n                            rx=\".939\"\n                            transform=\"rotate(-146 8.83 13.822)\"\n                        />\n                        <path d=\"M8.072 13.306l1.03-1.586.787.512-1.03 1.586z\" />\n                    </svg>\n                )}\n                {isIndeterminate && (\n                    <svg\n                        width=\"10\"\n                        height=\"2\"\n                        viewBox=\"0 0 10 2\"\n                        fill=\"currentColor\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                        <rect x=\"0\" y=\"0\" width=\"10\" height=\"2\" />\n                    </svg>\n                )}\n            </div>\n\n            {children && (\n                <span style={{ color: textColor[functionalState] }} className={styles.text}>\n                    {children}\n                </span>\n            )}\n        </label>\n    );\n}\n"],"names":["labelCursor","error","disabled","default","color","unchecked","tokens","checked","indeterminate","borderColor","backgroundColor","textColor","getCheckedState","isChecked","isIndeterminate","getFunctionalState","isDisabled","hasError","Checkbox","checkboxVerticalAlign","children","dataTest","dataTestId","id","labelPadding","isRequired","name","onChange","onKeyDown","value","functionalState","checkedState","warning","valuePropObject","classNames","styles","root","rootCheckboxVerticalAlignTop","rootCheckboxVerticalAlignCenter","cursor","padding","input","event","target","checkboxImage","text"],"mappings":"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"}