{"version":3,"file":"index.js","sources":["../../../../components/Link/index.tsx"],"sourcesContent":["import React from 'react';\nimport warning from 'warning';\nimport { Themed, Plain } from '../UIAction/index';\n\ninterface CommonProps {\n    to?: string;\n    target?: string;\n    shouldOpenInNewTab?: boolean;\n    children?: React.ReactNode;\n    isDisabled?: boolean;\n    onClick?: () => void;\n    onMouseEnter?: () => void;\n    onMouseOver?: () => void;\n    onFocus?: () => void;\n    onMouseLeave?: () => void;\n    onBlur?: () => void;\n    rel?: string;\n    dataTestId?: string;\n    dataTest?: string;\n    accessibilityLabel?: string;\n    title?: string;\n}\n\nconst getCommonLinkProps = (props: CommonProps): CommonProps => {\n    warning(\n        // If `onClick` prop exists then `to` must also exist.\n        !props.onClick || (props.to && props.onClick),\n        'The `onClick` prop in the Thumbprint `Link` and `ThemedLink` components should only be used when the `to` prop is also provided. Consider using the `Button` component instead.',\n    );\n\n    return {\n        to: props.to,\n        onClick: props.onClick,\n        onMouseEnter: props.onMouseEnter,\n        onMouseOver: props.onMouseOver,\n        onFocus: props.onFocus,\n        onMouseLeave: props.onMouseLeave,\n        onBlur: props.onBlur,\n        rel: props.rel,\n        target: props.target,\n        shouldOpenInNewTab: props.shouldOpenInNewTab,\n        isDisabled: props.isDisabled,\n        children: props.children,\n        accessibilityLabel: props.accessibilityLabel,\n        dataTestId: props.dataTestId,\n        dataTest: props.dataTest,\n        title: props.title,\n    };\n};\n\n/**\n * Anchor link that renders as text.\n */\nconst Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n    (\n        {\n            to,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            rel,\n            target,\n            shouldOpenInNewTab = false,\n            isDisabled = false,\n            children,\n            accessibilityLabel,\n            dataTest,\n            dataTestId,\n            theme = 'primary',\n            iconLeft,\n            iconRight,\n            title,\n        }: LinkProps,\n        ref,\n    ) => (\n        <Plain\n            {...getCommonLinkProps({\n                to,\n                onClick,\n                onMouseEnter,\n                onMouseOver,\n                onFocus,\n                onMouseLeave,\n                onBlur,\n                rel,\n                target,\n                shouldOpenInNewTab,\n                isDisabled,\n                children,\n                accessibilityLabel,\n                dataTest,\n                dataTestId,\n                title,\n            })}\n            theme={theme}\n            iconLeft={iconLeft}\n            iconRight={iconRight}\n            ref={ref}\n        />\n    ),\n);\n\nexport interface LinkProps {\n    /**\n     * Contents displayed within the anchor.\n     */\n    children?: React.ReactNode;\n    /**\n     * Description of the link’s content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Functionally disables the anchor. We discourage the use of this prop since it is difficult\n     * to visually indicate that a link is disabled. Consider not rendering the link if it is not\n     * interactive.\n     */\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Function to fire when clicking on the anchor. This should be used alongside the `to` prop.\n     */\n    onClick?: () => void;\n    /**\n     * Function that runs when the user hovers on the link.\n     */\n    onMouseEnter?: () => void;\n    /**\n     * Function that runs when the user hovers on the link. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: () => void;\n    /**\n     * Function that runs when the link receives focus.\n     */\n    onFocus?: () => void;\n    /**\n     * Function that runs when the user hovers away from the link.\n     */\n    onMouseLeave?: () => void;\n    /**\n     * Function that runs when the link loses focus.\n     */\n    onBlur?: () => void;\n    /**\n     * The anchor `rel` attribute. Setting this value will add to any default values provided by\n     * Thumbprint for the `rel` attribute.\n     */\n    rel?: string;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left of the text within `Link`.\n     */\n    iconLeft?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right of the text within `Link`.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * The anchor `target` attribute. Set this to `_blank` to open in a new tab, or to an arbitrary\n     * string to open the link in an `<iframe>` with the same `name`.\n     */\n    target?: string;\n    /**\n     * @deprecated\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * Sets the anchor’s text color.\n     *\n     * `inherit` will make the anchor inherit `color` from its parent.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Adds the `title` attribute to the anchor. This should be used infrequently since it's better\n     * to use descriptive text in `children`.\n     */\n    title?: string;\n}\n\n/**\n * Anchor link that visually looks like a button.\n */\nconst ThemedLink = React.forwardRef<HTMLAnchorElement, ThemedLinkProps>(\n    (\n        {\n            to,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            rel,\n            shouldOpenInNewTab = false,\n            target,\n            isDisabled = false,\n            children,\n            accessibilityLabel,\n            dataTest,\n            dataTestId,\n            icon,\n            iconRight,\n            theme = 'primary',\n            size = 'large',\n            width = 'auto',\n            title,\n        }: ThemedLinkProps,\n        ref,\n    ) => (\n        <Themed\n            {...getCommonLinkProps({\n                to,\n                onClick,\n                onMouseEnter,\n                onMouseOver,\n                onFocus,\n                onMouseLeave,\n                onBlur,\n                rel,\n                shouldOpenInNewTab,\n                target,\n                isDisabled,\n                children,\n                accessibilityLabel,\n                dataTest,\n                dataTestId,\n                title,\n            })}\n            icon={icon}\n            iconRight={iconRight}\n            theme={theme}\n            size={size}\n            width={width}\n            ref={ref}\n        />\n    ),\n);\n\ninterface ThemedLinkProps {\n    /**\n     * Contents displayed within the button.\n     */\n    children?: React.ReactNode;\n    /**\n     * Description of the link’s content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Visually and functionally disables the button.\n     */\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Function to fire when clicking on the anchor. This should be used alongside the `to` prop.\n     */\n    onClick?: () => void;\n    /**\n     * Function that runs when the user hovers on the link.\n     */\n    onMouseEnter?: () => void;\n    /**\n     * Function that runs when the user hovers on the link. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: () => void;\n    /**\n     * Function that runs when the link receives focus.\n     */\n    onFocus?: () => void;\n    /**\n     * Function that runs when the user hovers away from the link.\n     */\n    onMouseLeave?: () => void;\n    /**\n     * Function that runs when the link loses focus.\n     */\n    onBlur?: () => void;\n    /**\n     * The anchor `rel` attribute. Setting this value will add to any default values provided by\n     * Thumbprint for the `rel` attribute.\n     */\n    rel?: string;\n    /**\n     * The anchor `target` attribute. Set this to `_blank` to open in a new tab, or to an arbitrary\n     * string to open the link in an `<iframe>` with the same `name`.\n     */\n    target?: string;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left within the\n     * button. It must be one of the `small` icons.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right within the\n     * button. It must be one of the `small` icons.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Controls the button's background, text, and border theme.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'caution' | 'solid';\n    /**\n     * Changes the button's `line-height`, `padding`, `border-radius`, and `font-size`.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Themed links are as wide as the content that is passed in.  The `full` option will\n     * expand the width to `100%` on all screens. `full-below-small` will expand the width to 100%\n     * on devices smaller than [our `small` breakpoint](/tokens/#section-breakpoint).\n     */\n    width?: 'auto' | 'full' | 'full-below-small';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Adds the `title` attribute to the anchor. This should be used infrequently since it's better\n     * to use descriptive text in `children`.\n     */\n    title?: string;\n}\n\nexport default Link;\nexport { ThemedLink };\n"],"names":["getCommonLinkProps","props","warning","onClick","to","onMouseEnter","onMouseOver","onFocus","onMouseLeave","onBlur","rel","target","shouldOpenInNewTab","isDisabled","children","accessibilityLabel","dataTestId","dataTest","title","Link","React","forwardRef","ref","theme","iconLeft","iconRight","ThemedLink","icon","size","width"],"mappings":";;;;;;AAuBA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD;EACvBC,OAAO;GAEFD,KAAK,CAACE,OAAP,IAAmBF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACE,OAFlC,EAGH,iLAHG,CAAP;SAMO;IACHC,EAAE,EAAEH,KAAK,CAACG,EADP;IAEHD,OAAO,EAAEF,KAAK,CAACE,OAFZ;IAGHE,YAAY,EAAEJ,KAAK,CAACI,YAHjB;IAIHC,WAAW,EAAEL,KAAK,CAACK,WAJhB;IAKHC,OAAO,EAAEN,KAAK,CAACM,OALZ;IAMHC,YAAY,EAAEP,KAAK,CAACO,YANjB;IAOHC,MAAM,EAAER,KAAK,CAACQ,MAPX;IAQHC,GAAG,EAAET,KAAK,CAACS,GARR;IASHC,MAAM,EAAEV,KAAK,CAACU,MATX;IAUHC,kBAAkB,EAAEX,KAAK,CAACW,kBAVvB;IAWHC,UAAU,EAAEZ,KAAK,CAACY,UAXf;IAYHC,QAAQ,EAAEb,KAAK,CAACa,QAZb;IAaHC,kBAAkB,EAAEd,KAAK,CAACc,kBAbvB;IAcHC,UAAU,EAAEf,KAAK,CAACe,UAdf;IAeHC,QAAQ,EAAEhB,KAAK,CAACgB,QAfb;IAgBHC,KAAK,EAAEjB,KAAK,CAACiB;GAhBjB;CAPJ;;;;;;AA8BA,IAAMC,IAAI,GAAGC,KAAK,CAACC,UAAN,CACT,gBAsBIC,GAtBJ;MAEQlB,EAFR,QAEQA,EAFR;MAGQD,OAHR,QAGQA,OAHR;MAIQE,YAJR,QAIQA,YAJR;MAKQC,WALR,QAKQA,WALR;MAMQC,OANR,QAMQA,OANR;MAOQC,YAPR,QAOQA,YAPR;MAQQC,MARR,QAQQA,MARR;MASQC,GATR,QASQA,GATR;MAUQC,MAVR,QAUQA,MAVR;mCAWQC,kBAXR;MAWQA,kBAXR,sCAW6B,KAX7B;6BAYQC,UAZR;MAYQA,UAZR,gCAYqB,KAZrB;MAaQC,QAbR,QAaQA,QAbR;MAcQC,kBAdR,QAcQA,kBAdR;MAeQE,QAfR,QAeQA,QAfR;MAgBQD,UAhBR,QAgBQA,UAhBR;wBAiBQO,KAjBR;MAiBQA,KAjBR,2BAiBgB,SAjBhB;MAkBQC,QAlBR,QAkBQA,QAlBR;MAmBQC,SAnBR,QAmBQA,SAnBR;MAoBQP,KApBR,QAoBQA,KApBR;SAwBI,oBAAC,KAAD,eACQlB,kBAAkB,CAAC;IACnBI,EAAE,EAAFA,EADmB;IAEnBD,OAAO,EAAPA,OAFmB;IAGnBE,YAAY,EAAZA,YAHmB;IAInBC,WAAW,EAAXA,WAJmB;IAKnBC,OAAO,EAAPA,OALmB;IAMnBC,YAAY,EAAZA,YANmB;IAOnBC,MAAM,EAANA,MAPmB;IAQnBC,GAAG,EAAHA,GARmB;IASnBC,MAAM,EAANA,MATmB;IAUnBC,kBAAkB,EAAlBA,kBAVmB;IAWnBC,UAAU,EAAVA,UAXmB;IAYnBC,QAAQ,EAARA,QAZmB;IAanBC,kBAAkB,EAAlBA,kBAbmB;IAcnBE,QAAQ,EAARA,QAdmB;IAenBD,UAAU,EAAVA,UAfmB;IAgBnBE,KAAK,EAALA;GAhBkB,CAD1B;IAmBI,KAAK,EAAEK,KAnBX;IAoBI,QAAQ,EAAEC,QApBd;IAqBI,SAAS,EAAEC,SArBf;IAsBI,GAAG,EAAEH;KA9Cb;CADS,CAAb;;;;;AAiJA,IAAMI,UAAU,GAAGN,KAAK,CAACC,UAAN,CACf,iBAwBIC,GAxBJ;MAEQlB,EAFR,SAEQA,EAFR;MAGQD,OAHR,SAGQA,OAHR;MAIQE,YAJR,SAIQA,YAJR;MAKQC,WALR,SAKQA,WALR;MAMQC,OANR,SAMQA,OANR;MAOQC,YAPR,SAOQA,YAPR;MAQQC,MARR,SAQQA,MARR;MASQC,GATR,SASQA,GATR;oCAUQE,kBAVR;MAUQA,kBAVR,sCAU6B,KAV7B;MAWQD,MAXR,SAWQA,MAXR;+BAYQE,UAZR;MAYQA,UAZR,iCAYqB,KAZrB;MAaQC,QAbR,SAaQA,QAbR;MAcQC,kBAdR,SAcQA,kBAdR;MAeQE,QAfR,SAeQA,QAfR;MAgBQD,UAhBR,SAgBQA,UAhBR;MAiBQW,IAjBR,SAiBQA,IAjBR;MAkBQF,SAlBR,SAkBQA,SAlBR;0BAmBQF,KAnBR;MAmBQA,KAnBR,4BAmBgB,SAnBhB;yBAoBQK,IApBR;MAoBQA,IApBR,2BAoBe,OApBf;0BAqBQC,KArBR;MAqBQA,KArBR,4BAqBgB,MArBhB;MAsBQX,KAtBR,SAsBQA,KAtBR;SA0BI,oBAAC,MAAD,eACQlB,kBAAkB,CAAC;IACnBI,EAAE,EAAFA,EADmB;IAEnBD,OAAO,EAAPA,OAFmB;IAGnBE,YAAY,EAAZA,YAHmB;IAInBC,WAAW,EAAXA,WAJmB;IAKnBC,OAAO,EAAPA,OALmB;IAMnBC,YAAY,EAAZA,YANmB;IAOnBC,MAAM,EAANA,MAPmB;IAQnBC,GAAG,EAAHA,GARmB;IASnBE,kBAAkB,EAAlBA,kBATmB;IAUnBD,MAAM,EAANA,MAVmB;IAWnBE,UAAU,EAAVA,UAXmB;IAYnBC,QAAQ,EAARA,QAZmB;IAanBC,kBAAkB,EAAlBA,kBAbmB;IAcnBE,QAAQ,EAARA,QAdmB;IAenBD,UAAU,EAAVA,UAfmB;IAgBnBE,KAAK,EAALA;GAhBkB,CAD1B;IAmBI,IAAI,EAAES,IAnBV;IAoBI,SAAS,EAAEF,SApBf;IAqBI,KAAK,EAAEF,KArBX;IAsBI,IAAI,EAAEK,IAtBV;IAuBI,KAAK,EAAEC,KAvBX;IAwBI,GAAG,EAAEP;KAlDb;CADe,CAAnB;;;;;"}