{
  "version": 3,
  "sources": ["../../intersection-observer/intersection-observer.js"],
  "sourcesContent": ["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n\n(function(window, document) {\n'use strict';\n\n\n// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}(window, document));\n"],
  "mappings": ";CASC,SAASA,SAAQC,WAAU;AAC5B;AAKA,MAAI,0BAA0BD,WAC1B,+BAA+BA,WAC/B,uBAAuBA,QAAO,0BAA0B,WAAW;AAIrE,QAAI,EAAE,oBAAoBA,QAAO,0BAA0B,YAAY;AACrE,aAAO;AAAA,QAAeA,QAAO,0BAA0B;AAAA,QACrD;AAAA,QAAkB;AAAA,UAClB,KAAK,WAAY;AACf,mBAAO,KAAK,oBAAoB;AAAA,UAClC;AAAA,QACF;AAAA,MAAC;AAAA,IACH;AACA;AAAA,EACF;AASA,MAAI,WAAW,CAAC;AAShB,WAAS,0BAA0B,OAAO;AACxC,SAAK,OAAO,MAAM;AAClB,SAAK,SAAS,MAAM;AACpB,SAAK,aAAa,MAAM;AACxB,SAAK,qBAAqB,MAAM;AAChC,SAAK,mBAAmB,MAAM,oBAAoB,aAAa;AAC/D,SAAK,iBAAiB,CAAC,CAAC,MAAM;AAG9B,QAAI,aAAa,KAAK;AACtB,QAAI,aAAa,WAAW,QAAQ,WAAW;AAC/C,QAAI,mBAAmB,KAAK;AAC5B,QAAI,mBAAmB,iBAAiB,QAAQ,iBAAiB;AAGjE,QAAI,YAAY;AAGd,WAAK,oBAAoB,QAAQ,mBAAmB,YAAY,QAAQ,CAAC,CAAC;AAAA,IAC5E,OAAO;AAEL,WAAK,oBAAoB,KAAK,iBAAiB,IAAI;AAAA,IACrD;AAAA,EACF;AAYA,WAAS,qBAAqB,UAAU,aAAa;AAEnD,QAAI,UAAU,eAAe,CAAC;AAE9B,QAAI,OAAO,YAAY,YAAY;AACjC,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AAEA,QAAI,QAAQ,QAAQ,QAAQ,KAAK,YAAY,GAAG;AAC9C,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAGA,SAAK,yBAAyB;AAAA,MAC1B,KAAK,uBAAuB,KAAK,IAAI;AAAA,MAAG,KAAK;AAAA,IAAgB;AAGjE,SAAK,YAAY;AACjB,SAAK,sBAAsB,CAAC;AAC5B,SAAK,iBAAiB,CAAC;AACvB,SAAK,oBAAoB,KAAK,iBAAiB,QAAQ,UAAU;AAGjE,SAAK,aAAa,KAAK,gBAAgB,QAAQ,SAAS;AACxD,SAAK,OAAO,QAAQ,QAAQ;AAC5B,SAAK,aAAa,KAAK,kBAAkB,IAAI,SAAS,QAAQ;AAC5D,aAAO,OAAO,QAAQ,OAAO;AAAA,IAC/B,CAAC,EAAE,KAAK,GAAG;AAAA,EACb;AAOA,uBAAqB,UAAU,mBAAmB;AAQlD,uBAAqB,UAAU,gBAAgB;AAM/C,uBAAqB,UAAU,wBAAwB;AAQvD,uBAAqB,UAAU,UAAU,SAAS,QAAQ;AACxD,QAAI,0BAA0B,KAAK,oBAAoB,KAAK,SAAS,MAAM;AACzE,aAAO,KAAK,WAAW;AAAA,IACzB,CAAC;AAED,QAAI,yBAAyB;AAC3B;AAAA,IACF;AAEA,QAAI,EAAE,UAAU,OAAO,YAAY,IAAI;AACrC,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAEA,SAAK,kBAAkB;AACvB,SAAK,oBAAoB,KAAK,EAAC,SAAS,QAAQ,OAAO,KAAI,CAAC;AAC5D,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB;AAAA,EAC9B;AAOA,uBAAqB,UAAU,YAAY,SAAS,QAAQ;AAC1D,SAAK,sBACD,KAAK,oBAAoB,OAAO,SAAS,MAAM;AAEjD,aAAO,KAAK,WAAW;AAAA,IACzB,CAAC;AACD,QAAI,CAAC,KAAK,oBAAoB,QAAQ;AACpC,WAAK,wBAAwB;AAC7B,WAAK,oBAAoB;AAAA,IAC3B;AAAA,EACF;AAMA,uBAAqB,UAAU,aAAa,WAAW;AACrD,SAAK,sBAAsB,CAAC;AAC5B,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB;AAAA,EAC3B;AASA,uBAAqB,UAAU,cAAc,WAAW;AACtD,QAAI,UAAU,KAAK,eAAe,MAAM;AACxC,SAAK,iBAAiB,CAAC;AACvB,WAAO;AAAA,EACT;AAYA,uBAAqB,UAAU,kBAAkB,SAAS,eAAe;AACvE,QAAI,YAAY,iBAAiB,CAAC,CAAC;AACnC,QAAI,CAAC,MAAM,QAAQ,SAAS;AAAG,kBAAY,CAAC,SAAS;AAErD,WAAO,UAAU,KAAK,EAAE,OAAO,SAAS,GAAG,GAAG,GAAG;AAC/C,UAAI,OAAO,KAAK,YAAY,MAAM,CAAC,KAAK,IAAI,KAAK,IAAI,GAAG;AACtD,cAAM,IAAI,MAAM,wDAAwD;AAAA,MAC1E;AACA,aAAO,MAAM,EAAE,IAAI,CAAC;AAAA,IACtB,CAAC;AAAA,EACH;AAcA,uBAAqB,UAAU,mBAAmB,SAAS,gBAAgB;AACzE,QAAI,eAAe,kBAAkB;AACrC,QAAI,UAAU,aAAa,MAAM,KAAK,EAAE,IAAI,SAAS,QAAQ;AAC3D,UAAI,QAAQ,wBAAwB,KAAK,MAAM;AAC/C,UAAI,CAAC,OAAO;AACV,cAAM,IAAI,MAAM,mDAAmD;AAAA,MACrE;AACA,aAAO,EAAC,OAAO,WAAW,MAAM,CAAC,CAAC,GAAG,MAAM,MAAM,CAAC,EAAC;AAAA,IACrD,CAAC;AAGD,YAAQ,CAAC,IAAI,QAAQ,CAAC,KAAK,QAAQ,CAAC;AACpC,YAAQ,CAAC,IAAI,QAAQ,CAAC,KAAK,QAAQ,CAAC;AACpC,YAAQ,CAAC,IAAI,QAAQ,CAAC,KAAK,QAAQ,CAAC;AAEpC,WAAO;AAAA,EACT;AAQA,uBAAqB,UAAU,wBAAwB,WAAW;AAChE,QAAI,CAAC,KAAK,0BAA0B;AAClC,WAAK,2BAA2B;AAIhC,UAAI,KAAK,eAAe;AACtB,aAAK,sBAAsB;AAAA,UACvB,KAAK;AAAA,UAAwB,KAAK;AAAA,QAAa;AAAA,MACrD,OACK;AACH,iBAASA,SAAQ,UAAU,KAAK,wBAAwB,IAAI;AAC5D,iBAASC,WAAU,UAAU,KAAK,wBAAwB,IAAI;AAE9D,YAAI,KAAK,yBAAyB,sBAAsBD,SAAQ;AAC9D,eAAK,eAAe,IAAI,iBAAiB,KAAK,sBAAsB;AACpE,eAAK,aAAa,QAAQC,WAAU;AAAA,YAClC,YAAY;AAAA,YACZ,WAAW;AAAA,YACX,eAAe;AAAA,YACf,SAAS;AAAA,UACX,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAOA,uBAAqB,UAAU,0BAA0B,WAAW;AAClE,QAAI,KAAK,0BAA0B;AACjC,WAAK,2BAA2B;AAEhC,oBAAc,KAAK,mBAAmB;AACtC,WAAK,sBAAsB;AAE3B,kBAAYD,SAAQ,UAAU,KAAK,wBAAwB,IAAI;AAC/D,kBAAYC,WAAU,UAAU,KAAK,wBAAwB,IAAI;AAEjE,UAAI,KAAK,cAAc;AACrB,aAAK,aAAa,WAAW;AAC7B,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AASA,uBAAqB,UAAU,yBAAyB,WAAW;AACjE,QAAI,cAAc,KAAK,aAAa;AACpC,QAAI,WAAW,cAAc,KAAK,aAAa,IAAI,aAAa;AAEhE,SAAK,oBAAoB,QAAQ,SAAS,MAAM;AAC9C,UAAI,SAAS,KAAK;AAClB,UAAI,aAAa,sBAAsB,MAAM;AAC7C,UAAI,qBAAqB,KAAK,oBAAoB,MAAM;AACxD,UAAI,WAAW,KAAK;AACpB,UAAI,mBAAmB,eAAe,sBAClC,KAAK,kCAAkC,QAAQ,QAAQ;AAE3D,UAAI,WAAW,KAAK,QAAQ,IAAI,0BAA0B;AAAA,QACxD,MAAM,IAAI;AAAA,QACV;AAAA,QACA,oBAAoB;AAAA,QACpB,YAAY;AAAA,QACZ;AAAA,MACF,CAAC;AAED,UAAI,CAAC,UAAU;AACb,aAAK,eAAe,KAAK,QAAQ;AAAA,MACnC,WAAW,eAAe,oBAAoB;AAG5C,YAAI,KAAK,qBAAqB,UAAU,QAAQ,GAAG;AACjD,eAAK,eAAe,KAAK,QAAQ;AAAA,QACnC;AAAA,MACF,OAAO;AAIL,YAAI,YAAY,SAAS,gBAAgB;AACvC,eAAK,eAAe,KAAK,QAAQ;AAAA,QACnC;AAAA,MACF;AAAA,IACF,GAAG,IAAI;AAEP,QAAI,KAAK,eAAe,QAAQ;AAC9B,WAAK,UAAU,KAAK,YAAY,GAAG,IAAI;AAAA,IACzC;AAAA,EACF;AAeA,uBAAqB,UAAU,oCAC3B,SAAS,QAAQ,UAAU;AAG7B,QAAID,QAAO,iBAAiB,MAAM,EAAE,WAAW;AAAQ;AAEvD,QAAI,aAAa,sBAAsB,MAAM;AAC7C,QAAI,mBAAmB;AACvB,QAAI,SAAS,cAAc,MAAM;AACjC,QAAI,SAAS;AAEb,WAAO,CAAC,QAAQ;AACd,UAAI,aAAa;AACjB,UAAI,sBAAsB,OAAO,YAAY,IACzCA,QAAO,iBAAiB,MAAM,IAAI,CAAC;AAGvC,UAAI,oBAAoB,WAAW;AAAQ;AAE3C,UAAI,UAAU,KAAK,QAAQ,UAAUC,WAAU;AAC7C,iBAAS;AACT,qBAAa;AAAA,MACf,OAAO;AAKL,YAAI,UAAUA,UAAS,QACnB,UAAUA,UAAS,mBACnB,oBAAoB,YAAY,WAAW;AAC7C,uBAAa,sBAAsB,MAAM;AAAA,QAC3C;AAAA,MACF;AAIA,UAAI,YAAY;AACd,2BAAmB,wBAAwB,YAAY,gBAAgB;AAEvE,YAAI,CAAC;AAAkB;AAAA,MACzB;AACA,eAAS,cAAc,MAAM;AAAA,IAC/B;AACA,WAAO;AAAA,EACT;AAQA,uBAAqB,UAAU,eAAe,WAAW;AACvD,QAAI;AACJ,QAAI,KAAK,MAAM;AACb,iBAAW,sBAAsB,KAAK,IAAI;AAAA,IAC5C,OAAO;AAEL,UAAI,OAAOA,UAAS;AACpB,UAAI,OAAOA,UAAS;AACpB,iBAAW;AAAA,QACT,KAAK;AAAA,QACL,MAAM;AAAA,QACN,OAAO,KAAK,eAAe,KAAK;AAAA,QAChC,OAAO,KAAK,eAAe,KAAK;AAAA,QAChC,QAAQ,KAAK,gBAAgB,KAAK;AAAA,QAClC,QAAQ,KAAK,gBAAgB,KAAK;AAAA,MACpC;AAAA,IACF;AACA,WAAO,KAAK,wBAAwB,QAAQ;AAAA,EAC9C;AASA,uBAAqB,UAAU,0BAA0B,SAAS,MAAM;AACtE,QAAI,UAAU,KAAK,kBAAkB,IAAI,SAAS,QAAQ,GAAG;AAC3D,aAAO,OAAO,QAAQ,OAAO,OAAO,QAChC,OAAO,SAAS,IAAI,IAAI,KAAK,QAAQ,KAAK,UAAU;AAAA,IAC1D,CAAC;AACD,QAAI,UAAU;AAAA,MACZ,KAAK,KAAK,MAAM,QAAQ,CAAC;AAAA,MACzB,OAAO,KAAK,QAAQ,QAAQ,CAAC;AAAA,MAC7B,QAAQ,KAAK,SAAS,QAAQ,CAAC;AAAA,MAC/B,MAAM,KAAK,OAAO,QAAQ,CAAC;AAAA,IAC7B;AACA,YAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AACxC,YAAQ,SAAS,QAAQ,SAAS,QAAQ;AAE1C,WAAO;AAAA,EACT;AAaA,uBAAqB,UAAU,uBAC3B,SAAS,UAAU,UAAU;AAI/B,QAAI,WAAW,YAAY,SAAS,iBAChC,SAAS,qBAAqB,IAAI;AACtC,QAAI,WAAW,SAAS,iBACpB,SAAS,qBAAqB,IAAI;AAGtC,QAAI,aAAa;AAAU;AAE3B,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,KAAK;AAC/C,UAAI,YAAY,KAAK,WAAW,CAAC;AAIjC,UAAI,aAAa,YAAY,aAAa,YACtC,YAAY,aAAa,YAAY,UAAU;AACjD,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAQA,uBAAqB,UAAU,eAAe,WAAW;AACvD,WAAO,CAAC,KAAK,QAAQ,aAAaA,WAAU,KAAK,IAAI;AAAA,EACvD;AASA,uBAAqB,UAAU,sBAAsB,SAAS,QAAQ;AACpE,WAAO,aAAa,KAAK,QAAQA,WAAU,MAAM;AAAA,EACnD;AAQA,uBAAqB,UAAU,oBAAoB,WAAW;AAC5D,QAAI,SAAS,QAAQ,IAAI,IAAI,GAAG;AAC9B,eAAS,KAAK,IAAI;AAAA,IACpB;AAAA,EACF;AAOA,uBAAqB,UAAU,sBAAsB,WAAW;AAC9D,QAAI,QAAQ,SAAS,QAAQ,IAAI;AACjC,QAAI,SAAS;AAAI,eAAS,OAAO,OAAO,CAAC;AAAA,EAC3C;AAQA,WAAS,MAAM;AACb,WAAOD,QAAO,eAAe,YAAY,OAAO,YAAY,IAAI;AAAA,EAClE;AAWA,WAAS,SAAS,IAAI,SAAS;AAC7B,QAAI,QAAQ;AACZ,WAAO,WAAY;AACjB,UAAI,CAAC,OAAO;AACV,gBAAQ,WAAW,WAAW;AAC5B,aAAG;AACH,kBAAQ;AAAA,QACV,GAAG,OAAO;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAWA,WAAS,SAAS,MAAM,OAAO,IAAI,gBAAgB;AACjD,QAAI,OAAO,KAAK,oBAAoB,YAAY;AAC9C,WAAK,iBAAiB,OAAO,IAAI,kBAAkB,KAAK;AAAA,IAC1D,WACS,OAAO,KAAK,eAAe,YAAY;AAC9C,WAAK,YAAY,OAAO,OAAO,EAAE;AAAA,IACnC;AAAA,EACF;AAWA,WAAS,YAAY,MAAM,OAAO,IAAI,gBAAgB;AACpD,QAAI,OAAO,KAAK,uBAAuB,YAAY;AACjD,WAAK,oBAAoB,OAAO,IAAI,kBAAkB,KAAK;AAAA,IAC7D,WACS,OAAO,KAAK,gBAAgB,YAAY;AAC/C,WAAK,aAAa,OAAO,OAAO,EAAE;AAAA,IACpC;AAAA,EACF;AAUA,WAAS,wBAAwB,OAAO,OAAO;AAC7C,QAAI,MAAM,KAAK,IAAI,MAAM,KAAK,MAAM,GAAG;AACvC,QAAI,SAAS,KAAK,IAAI,MAAM,QAAQ,MAAM,MAAM;AAChD,QAAI,OAAO,KAAK,IAAI,MAAM,MAAM,MAAM,IAAI;AAC1C,QAAI,QAAQ,KAAK,IAAI,MAAM,OAAO,MAAM,KAAK;AAC7C,QAAI,QAAQ,QAAQ;AACpB,QAAI,SAAS,SAAS;AAEtB,WAAQ,SAAS,KAAK,UAAU,KAAM;AAAA,MACpC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAQA,WAAS,sBAAsB,IAAI;AACjC,QAAI;AAEJ,QAAI;AACF,aAAO,GAAG,sBAAsB;AAAA,IAClC,SAAS,KAAK;AAAA,IAGd;AAEA,QAAI,CAAC;AAAM,aAAO,aAAa;AAG/B,QAAI,EAAE,KAAK,SAAS,KAAK,SAAS;AAChC,aAAO;AAAA,QACL,KAAK,KAAK;AAAA,QACV,OAAO,KAAK;AAAA,QACZ,QAAQ,KAAK;AAAA,QACb,MAAM,KAAK;AAAA,QACX,OAAO,KAAK,QAAQ,KAAK;AAAA,QACzB,QAAQ,KAAK,SAAS,KAAK;AAAA,MAC7B;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAQA,WAAS,eAAe;AACtB,WAAO;AAAA,MACL,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,EACF;AASA,WAAS,aAAa,QAAQ,OAAO;AACnC,QAAI,OAAO;AACX,WAAO,MAAM;AACX,UAAI,QAAQ;AAAQ,eAAO;AAE3B,aAAO,cAAc,IAAI;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AASA,WAAS,cAAc,MAAM;AAC3B,QAAI,SAAS,KAAK;AAElB,QAAI,UAAU,OAAO,YAAY,MAAM,OAAO,MAAM;AAElD,aAAO,OAAO;AAAA,IAChB;AAEA,QAAI,UAAU,OAAO,cAAc;AAEjC,aAAO,OAAO,aAAa;AAAA,IAC7B;AAEA,WAAO;AAAA,EACT;AAIA,EAAAA,QAAO,uBAAuB;AAC9B,EAAAA,QAAO,4BAA4B;AAEnC,GAAE,QAAQ,QAAQ;",
  "names": ["window", "document"]
}
